<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZzT&#39;s Blog</title>
  
  
  <link href="https://zzt.github.io/atom.xml" rel="self"/>
  
  <link href="https://zzt.github.io/"/>
  <updated>2022-09-30T03:30:43.341Z</updated>
  <id>https://zzt.github.io/</id>
  
  <author>
    <name>ZzT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 内存管理知识</title>
    <link href="https://zzt.github.io/2022/09/30/windows-memory-management/"/>
    <id>https://zzt.github.io/2022/09/30/windows-memory-management/</id>
    <published>2022-09-30T03:28:35.000Z</published>
    <updated>2022-09-30T03:30:43.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-内存管理知识总结"><a href="#Windows-内存管理知识总结" class="headerlink" title="Windows 内存管理知识总结"></a>Windows 内存管理知识总结</h2><blockquote><p>工作中遇到了 32位 windows 程序虚拟内存不足的问题，于是对 Windows 内存相关知识做了调研探索。文内容总结自《Windows Internal》和 MSDN 文档，具体链接会注在文章最后，供大家参考</p></blockquote><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>在了解 Windows 内存知识前，需要弄清「虚拟内存」和「物理内存」的关系</p><h4 id="虚拟内存和物理内存的关系"><a href="#虚拟内存和物理内存的关系" class="headerlink" title="虚拟内存和物理内存的关系"></a>虚拟内存和物理内存的关系</h4><img src="/2022/09/30/windows-memory-management/vm_pm.png" class=""><p>首先，了解一下内存分配过程涉及到的一些概念：</p><ul><li>进程分配的都是虚拟内存，不能直接使用物理内存</li><li>虚拟内存地址通过 MMU (Mememory Management Unit），会被翻译为物理地址，找到对应的物理页</li><li>分配连续的虚拟内存，对应的物理内存不一定是连续的，好处是在进程层面不用过多考虑内存碎片化的影响</li><li>页命中，物理内存中存在对应的物理页</li><li>缺页（paging fault）异常，物理内存中没有找到对应的物理页</li><li>交换（swapping）或页面调度（paging），将当前没用的物理页（牺牲页）写入磁盘，将需要用的虚拟内存页映射到物理内存页</li></ul><p>总的来说，我们的程序用的都是虚拟内存，操作系统和硬件帮助我们将虚拟地址翻译为真正的物理地址，然后程序才能访问到内存中的数据。</p><p>比如图中所示，物理内存一共只有4页。开始时，「进程A」分配了 4 页内存，此时物理内存已经占满。此时如果「进程B」又分配了 2 页内存「VP3」「VP4」，这时会触发缺页异常，操作系统会根据缓存策略将短时间用不到的内存数据交换到磁盘，比如「进程A」的 「VP3」「VP4」被换出到磁盘。然后，「进程B」的「VP3」「VP4」才能被使用。</p><p>上面的例子只是帮助大家大致理解内存分配的流程，实际情况会更加复杂，涉及到缓存优化，空间优化等过程，本文不再赘述。</p><p>我们还可以观察到，图中的虚拟内存处在不同的状态，「Reserved」「Commited」，这两个状态代表了什么呢？请继续看下节。</p><h4 id="Windows中虚拟内存的两种状态-reserved-amp-comitted"><a href="#Windows中虚拟内存的两种状态-reserved-amp-comitted" class="headerlink" title="Windows中虚拟内存的两种状态 reserved &amp; comitted"></a>Windows中虚拟内存的两种状态 reserved &amp; comitted</h4><img src="/2022/09/30/windows-memory-management/reserve_commiting.png" class=""><ul><li>reserved 预留，表示预先分配的虚拟内存，但还没有映射到物理内存，在使用时需要先命中物理页</li><li>commited 已经提交，表示虚拟内存已经映射到了物理内存或已经缓存在磁盘</li><li>commited pages 也是 private pages，表示不能与其他进程共享</li></ul><h4 id="为什么虚拟内存需要-reserved，而不是直接使用-commited？"><a href="#为什么虚拟内存需要-reserved，而不是直接使用-commited？" class="headerlink" title="为什么虚拟内存需要 reserved，而不是直接使用 commited？"></a>为什么虚拟内存需要 reserved，而不是直接使用 commited？</h4><p>这是我在 stackoverflow 上找到的我比较认可的回答：</p><blockquote><p>Why would I want to reserve? Why not just get committed memory? There are several reasons I have in mind:</p><ol><li>Some application needs a specific address range, say from 0x400000 to 0x600000, but does not need the memory for storing anything. It is used to trap memory access. E.g., if some code accesses such area, it will be caught. (Useful for some reason.)</li><li>Some thread needs to store progressively expanding data. And the data needs to be in one contiguous chunk of memory. It is preferred not to commit large physical memory at one go because it is not needed and would be such a waste. The memory can be utilized by some other threads first. The physical memory is committed only on demand.</li></ol></blockquote><p>翻译一下：</p><ol><li>某些应用需要特定的地址空间用于捕获内存捕获监测，一但某些代码开辟了这块空间，就捕获这个事件</li><li>预留连续的空间，后续再使用，比如开辟一条线程时，会先预留 1MB 的空间，而不会直接提交到物理内存</li></ol><h4 id="关于「32位程序」和「32位CPU」的-Q-amp-A"><a href="#关于「32位程序」和「32位CPU」的-Q-amp-A" class="headerlink" title="关于「32位程序」和「32位CPU」的 Q&amp;A"></a>关于「32位程序」和「32位CPU」的 Q&amp;A</h4><p><strong>Q1. 为什么 8G 甚至 16G 物理内存的笔记本电脑跑 winp32 程序还是会 OOM？</strong></p><p><strong>A：win32程序的内存瓶颈在于虚拟内存不足，而不是物理内存</strong></p><p>下面做个比喻，解释 32位程序虚拟内存和物理内存的关系是什么。</p><p>比如虚拟内存是学校，物理内存是宿舍。</p><ul><li><p>学校盖的大，能招的学生就多，程序能分配的虚拟内存空间就大。</p></li><li><p>如果学校盖的小，宿舍盖的大，那么宿舍一定会有空位，因为学校就算招满人了，宿舍也住不满（代表了单进程，虚拟内存小于物理内存的情况，不考虑使用 PAE 技术的情况）</p></li><li><p>如果学校盖的大，宿舍盖的小，宿舍就会住满。那么就需要设定策略，让更需要住宿的同学住进宿舍，不太需要住宿的同学就要搬出宿舍，给需要的同学腾出位置（代表了虚拟内存大于物理内存的情况下，物理内存打满后，需要将不需要的内存数据写入磁盘）</p></li></ul><p><strong>Q2. 为什么32位程序瓶颈是在虚拟内存上？</strong></p><p><strong>A: 32位进程，虚拟内存空间是 4GB，Windows系统中，内核空间占用 2GB，用户空间只有 2GB</strong></p><p>32位程序\操作系统的指针只能表示 2^32 = 4GB 范围内的地址，所以我们开辟的虚拟内存也只能在 4GB 以内。</p><p>一个进程的内存空间布局是什么样子，为什么我们可用的空间只有 2GB 会在介绍 Windows 进程内存布局一节中回答。</p><p><strong>Q3. 32位CPU和32位操作系统的关系是什么？</strong></p><p><strong>A：32位操作系统的一条指令是32位，32位CPU一个时钟周期正好处理一条32位指令</strong></p><ul><li><p>32位CPU 是不能使用 64 位操作系统的，因为 64位操作系统一条指令是 64位，32位 CPU 无法处理</p></li><li><p>反过来，64位CPU 可以运行 32位操作系统，但无法发挥出 CPU 的全部能力，有点「大马拉小车」的感觉</p></li></ul><p><strong>Q4. 32位CPU只能使用 4GB 的物理内存么？CPU的寻址能力和CPU的位宽相关么？</strong></p><p><strong>A：不是。不相关，CPU的寻址范围和CPU的位宽毫无关系</strong></p><ul><li><p>寻址范围和地址线宽度有关，和 CPU 位宽无关，Intel 32位CPU 早在1995年就支持36位地址线了，也就是 32位CPU 能使用 64GB 的物理内存</p></li><li><p>为什么能访问更大的内存地址？可以详细了解 PAE（Physical Address Extension） 技术</p></li><li><p>PAE 技术是为了让多个 32位进程累计使用内存的情况下，能使用更多的物理内存（超过4GB）</p></li></ul><h3 id="Windows-内存布局（Windows-Process-Virtual-Space"><a href="#Windows-内存布局（Windows-Process-Virtual-Space" class="headerlink" title="Windows 内存布局（Windows Process Virtual Space)"></a>Windows 内存布局（Windows Process Virtual Space)</h3><h4 id="用户地址空间（User-Address-Space-Layout）"><a href="#用户地址空间（User-Address-Space-Layout）" class="headerlink" title="用户地址空间（User Address Space Layout）"></a>用户地址空间（User Address Space Layout）</h4><p>我们重点关注我们能用到的地址空间是什么样子的，对内核空间感兴趣的同学可以自己查阅其他资料。</p><p>下图出自《Windows Internals 6》<br><img src="/2022/09/30/windows-memory-management/wpvs_1.png" class=""></p><p>我们知道程序需要先被加载到内存中，才能运行</p><p>上图描述了 x86（32位）进程的内存布局：</p><ul><li>分为了 3GB 的用户空间，和 1GB 的内核空间，但这并不是 Win32 程序的正常布局，而是开启了大地址空间模式的程序（LARGE_ADDRESS_AWARE）</li><li>正常的 Win32 程序用户空间只有 2GB，内核空间也占用 2GB</li><li>用户空间占用低地址（00000000 ~ 7FFFEFFF），内核空间占用高地址(7FFF000 ~ FFFFFFFF)</li><li>用户空间存放了「代码」「全局变量」「线程栈」「DLL」等</li><li>内核空间图中详细标明了包含什么，本文不再赘述，感兴趣的同学可以自行了解</li></ul><img src="/2022/09/30/windows-memory-management/wpvs_2.png" class=""><p>上图详细描述了用户空间的布局：</p><ul><li>最低地址存放了 .exe</li><li>然后是 .dll</li><li>然后是 Heap，Heap 中存放的是通过 <code>HeapAlloc</code> 等 API 分配的堆内存</li><li>然后是 Thread Stack，存放的是线程栈内存，每开一条新线程就会对应开辟一块栈内存</li></ul><p>图中还提到了 ASLR，这是什么，后文会具体介绍。</p><p>下面，再来看一张图，此图出自《程序员的自我修养》</p><img src="/2022/09/30/windows-memory-management/vm_space.png" class=""><p>图中描述的用户空间非常「碎片化」，这可能也和 ASLR 相关。如果你要分析应用的虚拟内存布局，不要完全以图中的布局为准，要以自己程序真正运行的情况为准。</p><img src="/2022/09/30/windows-memory-management/user_asl.png" class=""><p>这是书中对地址空间如何计算的一些描述：</p><ol><li><p>线程栈、进程堆、已装载的镜像文件（exe、dll）的地址是动态计算获得的</p></li><li><p>其中 exe dll 需要应用支持 ASLR（随机选择地址）</p></li></ol><h4 id="ASLR-是什么？"><a href="#ASLR-是什么？" class="headerlink" title="ASLR 是什么？"></a>ASLR 是什么？</h4><p>下面具体看看，到底什么是 ASLR</p><img src="/2022/09/30/windows-memory-management/what_is_aslr.png" class=""><ul><li>ASLR 全称是 Address Space Layout Randomization，可以翻译为随机地址空间</li><li>目的是为了防御恶意软件做注入攻击，因为固定地址更容易被攻击者破译</li><li>这么做随之而来的缺点是更容易造成「内存碎片化」</li></ul><h4 id="如何关闭-ASLR？"><a href="#如何关闭-ASLR？" class="headerlink" title="如何关闭 ASLR？"></a>如何关闭 ASLR？</h4><img src="/2022/09/30/windows-memory-management/close_aslr_1.png" class=""><p>修改链接器高级配置，关闭随机基址（/DYNAMICBASE:NO)</p><p>此能力我没有亲自试验过，有需求的同学可以自己尝试</p><h4 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h4><p>在 Windows 中，Memory Manager 会为每个线程提供两个栈，<strong>用户栈(user stack)</strong>和<strong>内核栈(kernel stack)</strong></p><p>我们仍然只总结用户栈</p><img src="/2022/09/30/windows-memory-management/user_stack_1.png" class=""><ul><li><p>线程创建时，默认预留 1MB 虚拟内存</p></li><li><p>通过编译器指定参数 /STACK:reverse 可以将预留内存大小写入 PE Header 中（修改 stack size）</p></li><li><p>尽管预留了 1 MB 虚拟内存，但只有 first page 虚拟内存会被提交（真正分配）</p></li></ul><img src="/2022/09/30/windows-memory-management/user_stack_2.png" class=""><ul><li>64 位系统跑 32 位程序，最大线程数量比 32 位机器跑 32 程序要少</li><li>原因是 64 位机器跑 32 位程序，会额外创建 64 位的栈，同样只有 2GB 虚拟内存空间，但每个线程重复消耗了两份内存</li><li>实测，64 位栈占用 256 kb 内存，每个线程栈合计占用 1.25 MB</li></ul><p>总结，理论上在 64位系统上跑 32位程序，会有额外的开销，本来 32 位程序虚拟内存只有 2GB 可用，运行在 64 位系统上时会更快的暴露这个短板。想了解更多的同学可以去查阅一下 <code>WoW64(windows on windows64)</code>相关内容</p><h3 id="分析-Windows-虚拟内存的利器，VMMap"><a href="#分析-Windows-虚拟内存的利器，VMMap" class="headerlink" title="分析 Windows 虚拟内存的利器，VMMap"></a>分析 Windows 虚拟内存的利器，VMMap</h3><p>上面介绍了那么多理论，实际上我们该如何分析应用的虚拟内存呢？</p><p>官方为我们提供了一款工具 <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/vmmap">vmmap</a></p><h4 id="内存区域含义"><a href="#内存区域含义" class="headerlink" title="内存区域含义"></a>内存区域含义</h4><img src="/2022/09/30/windows-memory-management/vmmap.png" class=""><ul><li><p>Total:：总的分配过的虚拟内存</p></li><li><p>Free：可用的虚拟内存</p></li><li><p>Image：exe dll 占用的虚拟内存</p></li><li><p>Private data：进程私有的堆占用的内存</p></li><li><p>Stack：线程栈占用的虚拟内存</p></li></ul><img src="/2022/09/30/windows-memory-management/vmmap_help.png" class=""><p>我们也可以打开 vmmap 点 help 进行查看每个区域的具体含义</p><h4 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h4><img src="/2022/09/30/windows-memory-management/vmmap_cli.png" class=""><p>除了 GUI，vmmap 也提供了 CLI 供我们在脚本中使用</p><h3 id="如何解决-Win32-程序的虚拟内存瓶颈？"><a href="#如何解决-Win32-程序的虚拟内存瓶颈？" class="headerlink" title="如何解决 Win32 程序的虚拟内存瓶颈？"></a>如何解决 Win32 程序的虚拟内存瓶颈？</h3><p>介绍了理论和工具，如何解决实际问题呢？</p><h4 id="将-32位程序升级为-64位"><a href="#将-32位程序升级为-64位" class="headerlink" title="将 32位程序升级为 64位"></a>将 32位程序升级为 64位</h4><p>虚拟内存在 64位程序上将不会成为瓶颈，但将现有程序改为 64位并不是一件容易的事，具体需要做什么就不再本文赘述了。</p><h4 id="缩小冗余的预留空间（Reserved）"><a href="#缩小冗余的预留空间（Reserved）" class="headerlink" title="缩小冗余的预留空间（Reserved）"></a>缩小冗余的预留空间（Reserved）</h4><ul><li>减小线程栈分配空间，在上文得出结论，默认情况下，32位程序跑在64位系统上，每条线程需要开辟 1.25MB内存，那我们可以适当减小栈大小。如果是 java 程序可以通过JVM启动参数 <code>Xss</code> 来减少栈空间</li><li>减少大的预留的堆空间，比如 java 程序在 JVM 启动的时候就会预留分配 XmX 大小的空间，如果是 1GB，就占用了一半的空间。</li></ul><h4 id="扩大进程虚拟内存空间"><a href="#扩大进程虚拟内存空间" class="headerlink" title="扩大进程虚拟内存空间"></a>扩大进程虚拟内存空间</h4><img src="/2022/09/30/windows-memory-management/default_vm_size.png" class=""><ul><li><p>默认情况，进程虚拟内存大小 2GB</p></li><li><p>如果 <code>exe</code> 做大地址空间标记且系统启动使用了特殊参数，可以将进程虚拟内存大小升至 3GB</p></li></ul><p>下面讲具体该怎么做</p><ol><li>在编译 exe 的时候需要指定 Linker 参数 <code>LARGE_ADDRESS_AWARE</code> 为 YES</li><li>需要用管理员模式打开 cmd，然后输入命令 <code>bcdedit /set increaseuserva 3072</code>，3072 表示 3GB</li></ol><p>如何检查大地址空间模式是否生效？</p><ol><li>确认 windows 系统是否通过 bcdedit 设置了参数，用管理员模式打开 cmd，输入 <code>bcdedit</code>，看列表中是否有 increaseuserva 3072，如果有就进行下一步</li><li>使用 dumpbin /headers 查看 exe 是否开启了大地址空间模式</li></ol><img src="/2022/09/30/windows-memory-management/check_large_adress.png" class=""><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《Windows Internal 6》《Windows Internal 7》<br>《程序员的自我修养》</p><p><a href="https://hansimov.gitbook.io/csapp/part2/ch09-virtual-memory">https://hansimov.gitbook.io/csapp/part2/ch09-virtual-memory</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/virtual-address-spaces">https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/virtual-address-spaces</a></p><p><a href="https://news.mydrivers.com/1/571/571392.htm">https://news.mydrivers.com/1/571/571392.htm</a></p><p><a href="https://www.zhihu.com/question/382484336">https://www.zhihu.com/question/382484336</a></p><p><a href="https://stackoverflow.com/questions/16264118/how-jvm-stack-heap-and-threads-are-mapped-to-physical-memory-or-operation-syste">https://stackoverflow.com/questions/16264118/how-jvm-stack-heap-and-threads-are-mapped-to-physical-memory-or-operation-syste</a></p><p><a href="https://stackoverflow.com/questions/9560993/how-do-you-disable-aslr-address-space-layout-randomization-on-windows-7-x64">https://stackoverflow.com/questions/9560993/how-do-you-disable-aslr-address-space-layout-randomization-on-windows-7-x64</a></p><p><a href="https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?redirectedfrom=MSDN&amp;view=msvc-170">https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?redirectedfrom=MSDN&amp;view=msvc-170</a></p><p><a href="https://stackoverflow.com/questions/2440434/whats-the-difference-between-reserved-and-committed-memory">https://stackoverflow.com/questions/2440434/whats-the-difference-between-reserved-and-committed-memory</a></p><p><a href="https://docs.microsoft.com/en-us/archive/blogs/markrussinovich/pushing-the-limits-of-windows-virtual-memory">https://docs.microsoft.com/en-us/archive/blogs/markrussinovich/pushing-the-limits-of-windows-virtual-memory</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows-内存管理知识总结&quot;&gt;&lt;a href=&quot;#Windows-内存管理知识总结&quot; class=&quot;headerlink&quot; title=&quot;Windows 内存管理知识总结&quot;&gt;&lt;/a&gt;Windows 内存管理知识总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;工</summary>
      
    
    
    
    <category term="Windows" scheme="https://zzt.github.io/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>【Kotlin Compiler】IR Transform Plugin 教程</title>
    <link href="https://zzt.github.io/2022/05/29/kt-complier-plugin/"/>
    <id>https://zzt.github.io/2022/05/29/kt-complier-plugin/</id>
    <published>2022-05-29T12:37:37.000Z</published>
    <updated>2022-05-31T04:09:24.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【Kotlin-Compiler】IR-Transform-Plugin-教程"><a href="#【Kotlin-Compiler】IR-Transform-Plugin-教程" class="headerlink" title="【Kotlin Compiler】IR Transform Plugin 教程"></a>【Kotlin Compiler】IR Transform Plugin 教程</h2><blockquote><ul><li>本文会通过一个小 demo 手把手教你学会如何利用 Kotlin Compiler Plugin 进行 IR 插桩。如果你对 IR（intermediate representation） 是什么还一知半解，不妨先参考 <a href="https://androidzzt.github.io/2022/05/29/kt-ir/">【Kotlin Compiler】IR 介绍</a></li><li>如果你想直接参考源码，可以直接看<a href="https://github.com/androidZzT/KtIRTransformSample">这里</a>，如果能点个 star 就更好了</li></ul></blockquote><p>下面开始正题</p><h3 id="我们的目标是什么？"><a href="#我们的目标是什么？" class="headerlink" title="我们的目标是什么？"></a>我们的目标是什么？</h3><p>先来看两段代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(param1: <span class="type">String</span>? = <span class="string">&quot;Hello&quot;</span>, param2: <span class="type">String</span>? = <span class="string">&quot;World&quot;</span>)</span></span>: String &#123;</span><br><span class="line">  println(<span class="string">&quot;foo costs[<span class="subst">$&#123;startTime.elapsedNow()&#125;</span>]&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> startTime = TimeSource.Monotonic.markNow() <span class="comment">//类似 Java 中的 System.currentMills()</span></span><br><span class="line">  <span class="comment">// do something cost time</span></span><br><span class="line">  <span class="keyword">val</span> result = param1 + param2</span><br><span class="line">  println(<span class="string">&quot;foo costs[<span class="subst">$&#123;startTime.elapsedNow()&#125;</span>]&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是我们日常通过 log 统计方法耗时的一个小例子，如果需要统计的方法数量较多，我们要手写非常多的重复代码。</p><p>在 Java 中，我们可以找到被注解标注的方法，然后通过 Transform 字节码的方式将模板代码插到指定位置。在 Kotlin 中，方案是一样的，只不过我们需要 Transform 的不是字节码了，而是 IR。做完 Transform 的工作后，只需写下面这段代码就可满足需求。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cost</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(param1: <span class="type">String</span>? = <span class="string">&quot;Hello&quot;</span>, param2: <span class="type">String</span>? = <span class="string">&quot;World&quot;</span>)</span></span>: String &#123;</span><br><span class="line">  <span class="keyword">return</span> param1 + param2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怎样开发一个-Kotlin-Compiler-Plugin？"><a href="#怎样开发一个-Kotlin-Compiler-Plugin？" class="headerlink" title="怎样开发一个 Kotlin Compiler Plugin？"></a>怎样开发一个 Kotlin Compiler Plugin？</h3><p>了解完我们的目标后，就需要了解开发一个 Kotlin Compiler Plugin 的标准过程是什么？我们需要了解那些概念，要用哪些 API？</p><p>下面我们先来看看如何开发 Kotlin Compiler Plugin</p><img src="/2022/05/29/kt-complier-plugin/kt_gradle_plugin.png" class=""><p>此图是 Kotlin Compiler Plugin 的架构图，我已经在图中标注了每个模块的职责是什么，不再赘述。</p><h4 id="0-工程搭建"><a href="#0-工程搭建" class="headerlink" title="0.工程搭建"></a>0.工程搭建</h4><p>环境说明：</p><ul><li>IDE-IntelliJ IDEA 2021.3.3 (Community Edition)</li><li>KotlinPlugin-1.6.21</li><li>JDK-1.8</li></ul><p>下面是工程中需要依赖的库和插件，详细可参考<a href="https://github.com/androidZzT/KtIRTransformSample/blob/main/build.gradle">Sample代码依赖</a><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&quot;java-gradle-plugin&quot;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&quot;kotlin-kapt&quot;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation(<span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.6.21&quot;</span>) <span class="comment">// kotlin 标准库</span></span><br><span class="line">    implementation(<span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin-api:1.6.21&quot;</span>) <span class="comment">// kotlin-插件 api</span></span><br><span class="line">    implementation(<span class="string">&quot;org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.21&quot;</span>) <span class="comment">// kotlin-插件 api 注意：如果需要用 com.github.tschuchortdev:kotlin-compile-testing，这里必须使用 embeddable 版本</span></span><br><span class="line">    implementation <span class="string">&quot;com.google.auto.service:auto-service:1.0.1&quot;</span> <span class="comment">//auto-service，找到插件中的具体实现类</span></span><br><span class="line">    kapt <span class="string">&quot;com.google.auto.service:auto-service:1.0.1&quot;</span> <span class="comment">//kapt 生成映射代码</span></span><br><span class="line"></span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter:5.8.1&#x27;</span> <span class="comment">// junit engine</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.jetbrains.kotlin:kotlin-test-junit:1.6.21&#x27;</span></span><br><span class="line">    testImplementation(<span class="string">&quot;com.github.tschuchortdev:kotlin-compile-testing:1.4.8&quot;</span>) <span class="comment">//compiler plugin / ksp plugin 单测扩展库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1-KotlinCompilerPluginSupportPlugin"><a href="#1-KotlinCompilerPluginSupportPlugin" class="headerlink" title="1.KotlinCompilerPluginSupportPlugin"></a>1.KotlinCompilerPluginSupportPlugin</h4><p>此类是 Gradle 和 Kotlin 的桥梁，主要职责是提供插件入口，获取插件 AGV（artifact group version）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodPerfIRPlugin</span>: <span class="type">KotlinCompilerPluginSupportPlugin &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">applyToCompilation</span><span class="params">(kotlinCompilation: <span class="type">KotlinCompilation</span>&lt;*&gt;)</span></span>: Provider&lt;List&lt;SubpluginOption&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> project = kotlinCompilation.target.project</span><br><span class="line">        <span class="keyword">val</span> extension = project.extensions.getByType(MethodPerfExtension::<span class="keyword">class</span>.java) <span class="keyword">as</span> MethodPerfExtension </span><br><span class="line">        <span class="comment">//可以获取到 build.gradle 中定义的一些配置，透传到 kotlin plugin 中</span></span><br><span class="line">        <span class="keyword">return</span> project.provider &#123;</span><br><span class="line">        listOf(</span><br><span class="line">            SubpluginOption(key = <span class="string">&quot;string&quot;</span>, value = extension.string),</span><br><span class="line">            SubpluginOption(key = <span class="string">&quot;file&quot;</span>, value = extension.file),</span><br><span class="line">        )</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [isApplicable] is checked against compilations of the project, and if it returns true,</span></span><br><span class="line"><span class="comment">   * then [applyToCompilation] may be called later.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isApplicable</span><span class="params">(kotlinCompilation: <span class="type">KotlinCompilation</span>&lt;*&gt;)</span></span>: <span class="built_in">Boolean</span> = project.plugins.hasPlugin(MethodPerfIRPlugin::<span class="keyword">class</span>.java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点要说的是 <code>applyToCompilation</code>，<code>isApplicable</code> 两个方法：</p><ul><li><code>isApplicable</code>比较简单，只有当其返回 true 的时候，<code>applyToCompilation</code>才会执行</li><li><code>applyToCompilation</code> 重点是返回值，在 <code>build.gradle</code> 的一些自定义配置可以通过这里透传到 Kotlin Compiler Plugin 中来，方便后续使用</li></ul><h4 id="2-CommandLineProcessor"><a href="#2-CommandLineProcessor" class="headerlink" title="2.CommandLineProcessor"></a>2.CommandLineProcessor</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@AutoService(CommandLineProcessor::class)</span> <span class="comment">// don&#x27;t forget it</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodPerfCommandLineProcessor</span> : <span class="type">CommandLineProcessor &#123;</span></span></span><br><span class="line"><span class="comment">// 指明插件 id</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> pluginId: String = <span class="string">&quot;com.zzt.demo.kt-method-perf-plugin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 cli option</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> pluginOptions: Collection&lt;AbstractCliOption&gt; = listOf(</span><br><span class="line">    CliOption(</span><br><span class="line">      optionName = OPTION_STRING,</span><br><span class="line">      valueDescription = <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      description = <span class="string">&quot;sample string argument&quot;</span>,</span><br><span class="line">      required = <span class="literal">false</span>,</span><br><span class="line">    ),</span><br><span class="line">    CliOption(</span><br><span class="line">      optionName = OPTION_FILE,</span><br><span class="line">      valueDescription = <span class="string">&quot;file&quot;</span>,</span><br><span class="line">      description = <span class="string">&quot;sample file argument&quot;</span>,</span><br><span class="line">      required = <span class="literal">false</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 cli 参数</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">processOption</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    option: <span class="type">AbstractCliOption</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    value: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    configuration: <span class="type">CompilerConfiguration</span></span></span></span><br><span class="line"><span class="params"><span class="function">  )</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;processOption:: option=<span class="variable">$option</span> value=<span class="variable">$value</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (option.optionName) &#123;</span><br><span class="line">      OPTION_STRING -&gt; configuration.put(ARG_STRING, value)</span><br><span class="line">      OPTION_FILE -&gt; configuration.put(ARG_FILE, value)</span><br><span class="line">      <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unexpected config option <span class="subst">$&#123;option.optionName&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类和 <code>ComponentRegistrar</code> 是我们写插件真正的入口，<code>CommandLineProcessor</code> 的作用是解析 cli 中的参数并保存下来，本次目标不涉及，大家有兴趣或有需求可以自己研究。</p><p>需要注意的是，此类一定要用 <code>@AutoService</code> 标记，否则无法调用到我们的实现</p><h4 id="3-ComponentRegistrar"><a href="#3-ComponentRegistrar" class="headerlink" title="3.ComponentRegistrar"></a>3.ComponentRegistrar</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService(ComponentRegistrar::class)</span> <span class="comment">// don&#x27;t forget it</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodPerfComponentRegistrar</span>: <span class="type">ComponentRegistrar &#123;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">registerProjectComponents</span><span class="params">(project: <span class="type">MockProject</span>, configuration: <span class="type">CompilerConfiguration</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;registerProjectComponents:: <span class="subst">$&#123;project.name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> string = configuration.<span class="keyword">get</span>(MethodPerfCommandLineProcessor.ARG_STRING, <span class="string">&quot;String&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> file = configuration.<span class="keyword">get</span>(MethodPerfCommandLineProcessor.ARG_FILE, <span class="string">&quot;File&quot;</span>)</span><br><span class="line">    IrGenerationExtension.registerExtension(project, MethodPerfExtension(string, file))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类的作用有两个：</p><ol><li>使用 <code>CommanLineProcessor</code> 中保存好的 option，本次逻辑不涉及，参考代码写法即可</li><li>注册 <code>Extension</code>，下面具体看 <code>Extension</code> 是什么</li></ol><p>同样注意，不要忘记加 <code>@AutoService</code></p><h4 id="4-Extension"><a href="#4-Extension" class="headerlink" title="4.Extension"></a>4.Extension</h4><p>重点来了，我们 80% 的逻辑可能都写在 <code>Extension</code> 中，通过此类我们可以对 IR 进行增删改，具体如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodPerfExtension</span></span>(): IrGenerationExtension &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">generate</span><span class="params">(moduleFragment: <span class="type">IrModuleFragment</span>, pluginContext: <span class="type">IrPluginContext</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// transform IR</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类中只有 <code>generate</code> 方法，其中包含两个参数：</p><ol><li><code>IrModuleFragment</code> 代表 IR 树的根节点，描述的是 module 相关的信息，比如里面是一组 <code>irFile</code>，自顶向下遍历可以得到整个 module 的 ir 信息</li><li><code>IrPluginContext</code> 包含了大多数我们在 transform IR 时用到的 api 和信息</li></ol><p><strong>Dump IR 树</strong></p><p>在 Kotlin IR 中，<code>IrElement</code> 是一切 IR 结构的父类，我们可以通过其扩展方法 <code>IrElement.dump</code> 查看 IR 树是怎样的结构。</p><p>比如，我们在 generate 中调用 <code>moduleFragment.dump()</code>，来查看下面代码的 IR</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MODULE_FRAGMENT name:&lt;main&gt;</span><br><span class="line">  FILE fqName:&lt;root&gt; fileName:/var/folders/lt/k622ndqs14l7_tcxst93z3cm0000gp/T/Kotlin-Compilation7335327567848552666/sources/main.kt</span><br><span class="line">    FUN name:main visibility:public modality:FINAL &lt;&gt; () returnType:kotlin.Unit</span><br><span class="line">      BLOCK_BODY</span><br><span class="line">        CALL &#x27;public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt&#x27; type=kotlin.Unit origin=null</span><br><span class="line">          message: CONST String type=kotlin.String value=&quot;Hello, World!&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h3><p>了解 Kotlin Complier Plugin 的基本情况后，你应该大致清楚了开发插件的过程。下面我们通过完成目标，加深对这个过程的理解。</p><h4 id="0-技术方案"><a href="#0-技术方案" class="headerlink" title="0.技术方案"></a>0.技术方案</h4><img src="/2022/05/29/kt-complier-plugin/method_cost.png" class=""><p>Transform 流程并不复杂，主要包含了：</p><ol><li>找到加注解的方法</li><li>重写方法体 IR<br>a. 增加时间戳<br>b. 原始方法体<br>c. 统计耗时</li><li>如果方法包含返回值，需要先保存返回值，再进行统计耗时</li></ol><h4 id="1-开发-IrElementTransformer"><a href="#1-开发-IrElementTransformer" class="headerlink" title="1.开发 IrElementTransformer"></a>1.开发 IrElementTransformer</h4><p>IrElementTransformer 继承自 IrElementVisitor，功能类似，不再赘述。</p><p>直接看一下代码，我们在 IrElementTransformer 中做了什么<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodCostTimeTransformer</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> pluginContext: IrPluginContext</span><br><span class="line">): IrElementTransformerVoidWithContext() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitFunctionNew</span><span class="params">(declaration: <span class="type">IrFunction</span>)</span></span>: IrStatement &#123;</span><br><span class="line">    println(<span class="string">&quot;visitFunctionNew:: <span class="subst">$&#123;declaration.render()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> body = declaration.body</span><br><span class="line">    <span class="keyword">val</span> annotationClass = pluginContext.referenceClass(FqName(<span class="string">&quot;com.zzt.demo.annotation.Cost&quot;</span>))!!</span><br><span class="line">    <span class="keyword">if</span> (body != <span class="literal">null</span> &amp;&amp; declaration.hasAnnotation(annotationClass)) &#123; <span class="comment">//有方法体&amp;被注解标注的方法</span></span><br><span class="line">      declaration.body = irCost(declaration, body) <span class="comment">//transform 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.visitFunctionNew(declaration)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>逻辑比较清晰，找到我们定义的注解，看被 visit 的方法是否加了注解，如果加了，就调用 <code>irCost()</code> Transform 方法体 IR</p><p>下面看看 <code>irCost()</code> 做了什么<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">irCost</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  irFunction: <span class="type">IrFunction</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  irBody: <span class="type">IrBody</span>)</span></span>: IrBlockBody &#123;</span><br><span class="line">  println(<span class="string">&quot;irCost:: &quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> DeclarationIrBuilder(pluginContext, irFunction.symbol).irBlockBody &#123;</span><br><span class="line">    +costEnter(pluginContext, irFunction) <span class="comment">//打印目标函数信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> startTime = irTemporary(irCall(pluginContext.markNowFunc()).also &#123;</span><br><span class="line">      it.dispatchReceiver = irGetObject(pluginContext.monotonicClass())</span><br><span class="line">    &#125;) <span class="comment">// 相当于调用 TimeSource.Monotonic.markNow()</span></span><br><span class="line"></span><br><span class="line">    +irBlock(resultType = irFunction.returnType) &#123;</span><br><span class="line">      <span class="keyword">for</span>(statement <span class="keyword">in</span> irBody.statements) &#123; <span class="comment">//原有方法体中的表达式</span></span><br><span class="line">        +statement</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;.transform(CostTimeReturnTransformer(pluginContext, irFunction, startTime), <span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>在方法耗时统计之前，通过 <code>costEnter()</code> 插桩打印目标函数的信息，比如方法名，参数是什么</li><li>调用 <code>TimeSource.Monotonic.markNow()</code> 记录开始时间 startTime</li><li>追加原有方法体内容，并开始进行返回体的 Transform</li></ol><h4 id="2-CostTimeReturnTransformer"><a href="#2-CostTimeReturnTransformer" class="headerlink" title="2. CostTimeReturnTransformer"></a>2. CostTimeReturnTransformer</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CostTimeReturnTransformer</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> pluginContext: IrPluginContext,</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> irFunction: IrFunction,</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> startTime: IrValueDeclaration</span><br><span class="line">): IrElementTransformerVoidWithContext() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitReturn</span><span class="params">(expression: <span class="type">IrReturn</span>)</span></span>: IrExpression &#123;</span><br><span class="line">    println(<span class="string">&quot;visitReturn:: <span class="subst">$&#123;expression.render()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (expression.returnTargetSymbol != irFunction.symbol) <span class="comment">//只 transform 目标函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.visitReturn(expression)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;transform return:: &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> DeclarationIrBuilder(pluginContext, irFunction.symbol).irBlock &#123;</span><br><span class="line">      <span class="keyword">if</span> (irFunction.returnType == pluginContext.irBuiltIns.unitType) &#123;</span><br><span class="line">        +costExit(pluginContext, irFunction, startTime)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@irBlock</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">val</span> result = irTemporary(expression.value) <span class="comment">//保存返回表达式</span></span><br><span class="line">      +costExit(pluginContext, irFunction, startTime, irGet(result)) <span class="comment">// 将统计时间逻辑插到 return 之前</span></span><br><span class="line">      +expression.apply &#123;</span><br><span class="line">        value = irGet(result) <span class="comment">// 将原有的返回表达式补回</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码逻辑也比较清晰</p><ol><li>如果不是目标函数，直接 return</li><li>如果目标函数无返回值，直接插桩 <code>costExit()</code></li><li>如果有返回值，则需要先保存返回值到临时变量，然后再插桩 <code>costExit()</code>，<strong>并且要补上原有的返回值，否则会造成方法一直返回 null 的情况</strong></li></ol><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><p><a href="https://github.com/tschuchortdev/kotlin-compile-testing">https://github.com/tschuchortdev/kotlin-compile-testing</a> 此库专用于 Kotlin Compiler Plugin 或者 KSP Plugin 的单测，让我们不需要将插件集成到目标工程就能进行测试，且容易上手，推荐大家使用。</p><p>但目前有个库兼容问题需要注意，<strong>我们在开发插件时必须依赖 <code>implementation(&quot;org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.21&quot;)</code>，不能使用 <code>implementation(&quot;org.jetbrains.kotlin:kotlin-compiler:1.6.21&quot;)</code></strong></p><p>下面就看看如何进行测试</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodPerfTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> `IR plugin`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//    val result = compile(</span></span><br><span class="line"><span class="comment">//      sourceFile = SourceFile.fromPath(File(&quot;&#123;path&#125;/main.kt&quot;))</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line">    <span class="keyword">val</span> result = compile( </span><br><span class="line">      sourceFile = SourceFile.kotlin(<span class="string">&quot;main.kt&quot;</span>, <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">        import com.zzt.demo.annotation.Cost       </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        fun main() &#123;</span></span><br><span class="line"><span class="string">          println(foo())</span></span><br><span class="line"><span class="string">          println(foo(&quot;Transform&quot;, &quot;Kotlin IR&quot;))</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @Cost</span></span><br><span class="line"><span class="string">        fun foo(param1: String? = &quot;Hello&quot;, param2: String? = &quot;World&quot;): String &#123;</span></span><br><span class="line"><span class="string">          println(&quot;foo called param1=[<span class="subst">$&#123;<span class="string">&#x27;$&#x27;</span>&#125;</span>param1], param2=[<span class="subst">$&#123;<span class="string">&#x27;$&#x27;</span>&#125;</span>param2]&quot;) //注意 $ 需要转义</span></span><br><span class="line"><span class="string">          return param1 + param2</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span>.trimIndent())</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    assertEquals(KotlinCompilation.ExitCode.OK, result.exitCode)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类加载目标产物，看最终运行结果是否符合预期</span></span><br><span class="line">    <span class="keyword">val</span> ktClazz = result.classLoader.loadClass(<span class="string">&quot;MainKt&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> main = ktClazz.declaredMethods.single &#123; it.name == <span class="string">&quot;main&quot;</span> &amp;&amp; it.parameterCount == <span class="number">0</span> &#125;</span><br><span class="line">    main.invoke(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">compile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    sourceFiles: <span class="type">List</span>&lt;<span class="type">SourceFile</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    plugin: <span class="type">ComponentRegistrar</span> = MethodPerfComponentRegistrar()</span></span>,</span><br><span class="line">  ): KotlinCompilation.Result &#123;</span><br><span class="line">    <span class="keyword">return</span> KotlinCompilation().apply &#123;</span><br><span class="line">      sources = sourceFiles</span><br><span class="line">      useIR = <span class="literal">true</span></span><br><span class="line">      compilerPlugins = listOf(plugin)</span><br><span class="line">      inheritClassPath = <span class="literal">true</span></span><br><span class="line">    &#125;.compile()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">compile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    sourceFile: <span class="type">SourceFile</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    plugin: <span class="type">ComponentRegistrar</span> = MethodPerfComponentRegistrar()</span></span>,</span><br><span class="line">  ): KotlinCompilation.Result &#123;</span><br><span class="line">    <span class="keyword">return</span> compile(listOf(sourceFile), plugin)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过 <code>SourceFile.kotlin</code> 或 <code>SourceFile.fromPath()</code> 可以传入需要测试的代码</li><li>测试代码会通过集成了 <code>MethodPerfComponentRegistrar</code> 的 kt 编译器进行编译</li><li>通过类加载目标代码，反射调用 main 函数，看执行结果是否正确</li></ol><p>下面看看 Transform IR 的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">⇢ foo(param1=Hello, param2=World) </span><br><span class="line">start function body ...</span><br><span class="line">foo called param1=[Hello], param2=[World]</span><br><span class="line">Hello, World</span><br><span class="line">end function body</span><br><span class="line"> ⇠ foo costs [1.02ms] returnValue=HelloWorld</span><br><span class="line"></span><br><span class="line">⇢ foo(param1=Transform, param2=Kotlin IR) </span><br><span class="line">start function body ...</span><br><span class="line">foo called param1=[Transform], param2=[Kotlin IR]</span><br><span class="line">Hello, World</span><br><span class="line">end function body</span><br><span class="line"> ⇠ foo costs [41.0us] returnValue=TransformKotlin IR</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://resources.jetbrains.com/storage/products/kotlinconf2018/slides/5_Writing%20Your%20First%20Kotlin%20Compiler%20Plugin.pdf">Writing Your First Kotlin Complier Plugin</a></li><li><a href="https://blog.bnorm.dev/writing-your-second-compiler-plugin-part-5">Writing Your Second Kotlin Compiler Plugin, Part 5 — Transforming Kotlin IR</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;【Kotlin-Compiler】IR-Transform-Plugin-教程&quot;&gt;&lt;a href=&quot;#【Kotlin-Compiler】IR-Transform-Plugin-教程&quot; class=&quot;headerlink&quot; title=&quot;【Kotlin Compil</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://zzt.github.io/categories/Kotlin/"/>
    
    
    <category term="Kotlin Compiler" scheme="https://zzt.github.io/tags/Kotlin-Compiler/"/>
    
  </entry>
  
  <entry>
    <title>【Kotlin Compiler】IR 介绍</title>
    <link href="https://zzt.github.io/2022/05/29/kt-ir/"/>
    <id>https://zzt.github.io/2022/05/29/kt-ir/</id>
    <published>2022-05-29T12:37:24.000Z</published>
    <updated>2022-05-31T04:09:32.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【Kotlin-Compiler】IR-介绍"><a href="#【Kotlin-Compiler】IR-介绍" class="headerlink" title="【Kotlin Compiler】IR 介绍"></a>【Kotlin Compiler】IR 介绍</h2><blockquote><p>本文会介绍 Kotlin Compiler 中 IR 是什么，以及操作 IR 的 api 是什么<br>在了解 IR 相关 api 后，可以继续学习 <a href="https://androidzzt.github.io/2022/05/29/kt-complier-plugin/">IR Transform Plugin 教程</a>，自己动手制作一个 Transform IR 的插件</p></blockquote><h3 id="Kotlin-IR-是什么"><a href="#Kotlin-IR-是什么" class="headerlink" title="Kotlin IR 是什么"></a>Kotlin IR 是什么</h3><img src="/2022/05/29/kt-ir/kotin_ir.png" class=""><p>IR 全称是 intermediate representation，表示编译过程中的中间信息，由编译器<code>前端</code>对源码分析后得到，随后会输入到<code>后端</code>进一步编译为机器码</p><p>IR 可以有一系列的表现方式，由高层表示逐渐下降(lowering)到低层</p><p>我们所讨论的 Kotlin IR 是抽象语法树结构（AST），是比较高层的 IR 表示类型。</p><p>有了完备的 IR，就可以利用不同的 <code>后端</code>，编出不同的目标代码，比如 <code>JVM</code> 的字节码，或者运行在 <code>iOS</code> 的机器码，这样就达到了跨端的目的，想了解更多 kotlin 跨端技术可以参考 <a href="https://kotlinlang.org/docs/multiplatform-mobile-getting-started.html">https://kotlinlang.org/docs/multiplatform-mobile-getting-started.html</a></p><h3 id="如何查看-Kotlin-IR-结构"><a href="#如何查看-Kotlin-IR-结构" class="headerlink" title="如何查看 Kotlin IR 结构"></a>如何查看 Kotlin IR 结构</h3><h4 id="IR-树示例"><a href="#IR-树示例" class="headerlink" title="IR 树示例"></a>IR 树示例</h4><p>我们先看一个例子，直观感受一下 IR 树是什么样子的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在转成 IR 信息后，是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MODULE_FRAGMENT name:&lt;main&gt;</span><br><span class="line">  FILE fqName:&lt;root&gt; fileName:/var/folders/lt/k622ndqs14l7_tcxst93z3cm0000gp/T/Kotlin-Compilation7335327567848552666/sources/main.kt</span><br><span class="line">    FUN name:main visibility:public modality:FINAL &lt;&gt; () returnType:kotlin.Unit</span><br><span class="line">      BLOCK_BODY</span><br><span class="line">        CALL &#x27;public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt&#x27; type=kotlin.Unit origin=null</span><br><span class="line">          message: CONST String type=kotlin.String value=&quot;Hello, World!&quot;</span><br></pre></td></tr></table></figure><h4 id="IrElement-和-IrElementVisitor"><a href="#IrElement-和-IrElementVisitor" class="headerlink" title="IrElement 和 IrElementVisitor"></a>IrElement 和 IrElementVisitor</h4><img src="/2022/05/29/kt-ir/visitor_1.png" class=""><p>查看 IR 的 Api 中，最重要的是 <code>IrElement</code> 和 <code>IrElementVisitor</code></p><p><code>IrElement</code> 是所有 IR 元素的父类，包含两个抽象方法<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;R, D&gt;</span> <span class="title">accept</span><span class="params">(visitor: <span class="type">IrElementVisitor</span>&lt;<span class="type">R</span>, D&gt;, <span class="keyword">data</span>: <span class="type">D</span>)</span></span>: R</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;D&gt;</span> <span class="title">acceptChildren</span><span class="params">(visitor: <span class="type">IrElementVisitor</span>&lt;<span class="type">Unit</span>, D&gt;, <span class="keyword">data</span>: <span class="type">D</span>)</span></span>: <span class="built_in">Unit</span></span><br></pre></td></tr></table></figure><br>accept 一般会调用 visitor 对应的 visitXXX 方法<br>acceptChildren 会依次调用 IR 子元素的 accept 方法</p><p>下面看看 <code>IrClass</code> 的具体实现，便于我们理解<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R, D&gt;</span> <span class="title">accept</span><span class="params">(visitor: <span class="type">IrElementVisitor</span>&lt;<span class="type">R</span>, D&gt;, <span class="keyword">data</span>: <span class="type">D</span>)</span></span>: R =</span><br><span class="line">    visitor.visitClass(<span class="keyword">this</span>, <span class="keyword">data</span>) <span class="comment">// 调用 visitor 对应的 visitClass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;D&gt;</span> <span class="title">acceptChildren</span><span class="params">(visitor: <span class="type">IrElementVisitor</span>&lt;<span class="type">Unit</span>, D&gt;, <span class="keyword">data</span>: <span class="type">D</span>)</span></span> &#123; <span class="comment">// 遍历 IrClass 子元素，并调用对应的 accept 方法</span></span><br><span class="line">    thisReceiver?.accept(visitor, <span class="keyword">data</span>)</span><br><span class="line">    typeParameters.forEach &#123; it.accept(visitor, <span class="keyword">data</span>) &#125;</span><br><span class="line">    declarations.forEach &#123; it.accept(visitor, <span class="keyword">data</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="输入和输出"><a href="#输入和输出" class="headerlink" title=" 输入和输出"></a><D,R> 输入和输出</h5><p>我们注意到 Visitor 中还包含了 <code>&lt;R, D&gt;</code> 两个泛型参数，D 作为参数传入，R 作为返回值，这分别代表什么意思呢？</p><p><code>D data</code> 表示在 visit ir 时的输入数据，我们可以把想要传递的上下文信息通过这个参数传入，在具体 visit 的过程中使用。</p><p>比如，我们可以修改打印 IR 元素前的缩进，或是随便插入什么其他信息都可以<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringIndentVisitor</span> : <span class="type">IrElementVisitor</span>&lt;<span class="type">Unit, String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitElement</span><span class="params">(element: <span class="type">IrElement</span>, <span class="keyword">data</span>: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$data</span><span class="subst">$&#123;render(element)&#125;</span> &#123;&quot;</span>)</span><br><span class="line">    element.acceptChildren(<span class="keyword">this</span>, <span class="string">&quot;  <span class="variable">$data</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$data</span>&#125;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>R</code> 表示在 accept visitor 时拿到的返回结果，在较少的 Transform ir 场景我们会用到这个能力，其他情况使用 Unit 即可。下面有个真实场景不会用到的例子，但能说明返回值的用法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Not as efficient as a while loop, but exemplifies how the output type could be used</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootParentVisitor</span> : <span class="type">IrElementVisitor</span>&lt;<span class="type">IrDeclarationParent?, Nothing?</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitElement</span><span class="params">(element: <span class="type">IrElement</span>, <span class="keyword">data</span>: <span class="type">Nothing</span>?)</span></span>: IrDeclarationParent? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitDeclaration</span><span class="params">(declaration: <span class="type">IrDeclarationBase</span>, <span class="keyword">data</span>: <span class="type">Nothing</span>?)</span></span>: IrDeclarationParent &#123;</span><br><span class="line">    <span class="keyword">val</span> parent = declaration.parent</span><br><span class="line">    <span class="keyword">return</span> parent.accept(<span class="keyword">this</span>, <span class="literal">null</span>) ?: parent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外。我们可以注意到 <code>acceptChildren</code> 接收的 visitor 泛型是 <D, Unit> ，也就是说我们不能在通过 acceptChildren 遍历 IR 树的过程中获取返回值，如果你需要在过程中保存一些信息，可以从外部传入一个变量保存。比如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectingVisitor</span></span>(</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> elements: MutableList&lt;IrElement&gt;</span><br><span class="line">) : IrElementVisitor&lt;<span class="built_in">Unit</span>, <span class="built_in">Nothing</span>?&gt; &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitElement</span><span class="params">(element: <span class="type">IrElement</span>, <span class="keyword">data</span>: <span class="type">Nothing</span>?)</span></span> &#123;</span><br><span class="line">    elements.add(element)</span><br><span class="line">    element.acceptChildren(<span class="keyword">this</span>, <span class="keyword">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">collect</span><span class="params">(element: <span class="type">IrElement</span>)</span></span> = buildList&lt;IrElement&gt; &#123;</span><br><span class="line">  element.accept(CollectingVisitor(<span class="keyword">this</span>), <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><h3 id="自顶向下遍历-IR-树"><a href="#自顶向下遍历-IR-树" class="headerlink" title="自顶向下遍历 IR 树"></a>自顶向下遍历 IR 树</h3><img src="/2022/05/29/kt-ir/visitor_2.png" class=""><p>了解了 IrElement 和 IrElementVisitor 后，我们可以自己实现一个类似 <code>IrElement.dump()</code> 的功能。通过重写 visitElement，在其中进行 acceptChildren，就能自顶向下递归遍历 IR 树，通过 <code>element.render()</code> 打印每个 IR 元素，代码如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecursiveVisitor</span>: <span class="type">IrElementVisitor</span>&lt;<span class="type">Unit, Nothing?</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">visitElement</span><span class="params">(element: <span class="type">IrElement</span>, <span class="keyword">data</span>: <span class="type">Nothing</span>?)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;visitElement:: <span class="subst">$&#123;element.render()&#125;</span>&quot;</span>)</span><br><span class="line">    element.acceptChildren(<span class="keyword">this</span>, <span class="keyword">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他-IR-操作-API"><a href="#其他-IR-操作-API" class="headerlink" title="其他 IR 操作 API"></a>其他 IR 操作 API</h3><h4 id="创建方法调用-IR"><a href="#创建方法调用-IR" class="headerlink" title="创建方法调用 IR"></a>创建方法调用 IR</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过传入方法全限定名找到具体方法 ir，除了方法还有找 class 等 api</span></span><br><span class="line"><span class="keyword">val</span> printlnFunc = irPluginContext.referenceFunctions(FqName(<span class="string">&quot;kotlin.io.println&quot;</span>)).single &#123;</span><br><span class="line">  <span class="keyword">val</span> parameters = it.owner.valueParameters</span><br><span class="line">  parameters.size == <span class="number">1</span> &amp;&amp; parameters[<span class="number">0</span>].type == irPluginContext.irBuiltIns.anyNType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过传入 IrFunction 到 irCall 完成方法的调用，其中 putValueArgument 可以向目标函数传入参数</span></span><br><span class="line">irCall(printlnFunc).also &#123;</span><br><span class="line">     it.putValueArgument(<span class="number">0</span>, irString(<span class="string">&quot;Hello, World&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> concat = irConcat() </span><br><span class="line">concat.addArgument(irString(<span class="string">&quot;a&quot;</span>)) </span><br><span class="line">concat.addArgument(irString(<span class="string">&quot;b&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="创建局部变量-IR，获取变量值"><a href="#创建局部变量-IR，获取变量值" class="headerlink" title="创建局部变量 IR，获取变量值"></a>创建局部变量 IR，获取变量值</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> i = irTemporary(irConcat().also &#123; <span class="comment">// i = &quot;Hello, World&quot;</span></span><br><span class="line">       it.addArgument(irString(<span class="string">&quot;Hello, World&quot;</span>))</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">irGet(i) <span class="comment">// 得到 i 的值 &quot;Hello, World&quot;</span></span><br></pre></td></tr></table></figure><h4 id="修改方法体"><a href="#修改方法体" class="headerlink" title="修改方法体"></a>修改方法体</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DeclarationIrBuilder(irPluginContext, irFunction.symbol).irBlockBody &#123;</span><br><span class="line">    +irCall(...) <span class="comment">// 可通过加号 插入自己的方法调用</span></span><br><span class="line">    <span class="keyword">for</span>(statement <span class="keyword">in</span> irBody.statements) &#123; <span class="comment">//原有方法体中的表达式</span></span><br><span class="line">          +statement</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持续补充…"><a href="#持续补充…" class="headerlink" title="持续补充…"></a>持续补充…</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.bnorm.dev/writing-your-second-compiler-plugin-part-2">Writing Your Second Kotlin Compiler Plugin, Part 2 — Inspecting Kotlin IR</a></p><p><a href="https://blog.bnorm.dev/writing-your-second-compiler-plugin-part-3">Writing Your Second Kotlin Compiler Plugin, Part 3 — Navigating Kotlin IR</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;【Kotlin-Compiler】IR-介绍&quot;&gt;&lt;a href=&quot;#【Kotlin-Compiler】IR-介绍&quot; class=&quot;headerlink&quot; title=&quot;【Kotlin Compiler】IR 介绍&quot;&gt;&lt;/a&gt;【Kotlin Compiler】IR </summary>
      
    
    
    
    <category term="Kotlin" scheme="https://zzt.github.io/categories/Kotlin/"/>
    
    
    <category term="Kotlin Compiler" scheme="https://zzt.github.io/tags/Kotlin-Compiler/"/>
    
  </entry>
  
  <entry>
    <title>不定积分基本公式与推导</title>
    <link href="https://zzt.github.io/2022/05/03/basic-integral/"/>
    <id>https://zzt.github.io/2022/05/03/basic-integral/</id>
    <published>2022-05-03T07:28:33.000Z</published>
    <updated>2022-05-04T02:41:03.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不定积分基本公式与推导"><a href="#不定积分基本公式与推导" class="headerlink" title="不定积分基本公式与推导"></a>不定积分基本公式与推导</h2><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mtext> </mtext><msup><mi>a</mi><mi>x</mi></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><msup><mi>a</mi><mi>x</mi></msup><mrow><mi>l</mi><mi>n</mi><mi>a</mi></mrow></mfrac></mstyle><mo>+</mo><mi>C</mi><mo separator="true">,</mo><mspace width="1em"/><mo stretchy="false">(</mo><msup><mi>a</mi><mi>x</mi></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msup><mi>a</mi><mi>x</mi></msup><mi>l</mi><mi>n</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">\int\ a^x\,dx=\dfrac{a^x}{lna} + C,\quad ({a^x})&#x27; = a^x lna</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.027392em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span></span></span></span><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>ln</mi><mo>⁡</mo><mrow><mi mathvariant="normal">∣</mi><mi>cos</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">∣</mi></mrow><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\tan x\,dx=\int\dfrac{sinx}{cosx}\,dx=-\int\dfrac{1}{cosx}\,d(cosx)=-\ln{|\cos{x}|} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mord">∣</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>cot</mi><mo>⁡</mo><mi>x</mi><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mrow><mi mathvariant="normal">∣</mi><mi>sin</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">∣</mi></mrow><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\cot x\,dx=\int\dfrac{cosx}{sinx}\,dx=-\int\dfrac{1}{sinx}\,d(sinx)=\ln{|\sin{x}|} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mord">∣</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mo stretchy="false">[</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>1</mn><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi><mspace linebreak="newline"></mspace><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mi mathvariant="normal">∣</mi><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>1</mn><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\dfrac{1}{cosx}\,dx =\int\sec{x}\,dx\\=\int\dfrac{cosx}{(cosx)^2}\,dx=\int\dfrac{cosx}{1-(sinx)^2}\,dx \\=\int\dfrac{1}{1-(sinx)^2}\,d(sinx)=\int\dfrac{1}{(1+sinx)(1-sinx)}\,d(sinx) \\=\dfrac{1}{2}[\int\dfrac{1}{1+sinx}\,d(sinx) - \int\dfrac{1}{1-sinx}\,d(sinx)] \\=\dfrac{1}{2}ln|\dfrac{1+sinx}{1-sinx}| + C \\=\dfrac{1}{2}ln|\dfrac{(1+sinx)^2}{(cosx)^2}|=ln|\dfrac{1+sinx}{cosx}| \\=ln|secx + tanx| + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0435600000000003em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0435600000000003em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.10585em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.427108em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>=</mo><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mo stretchy="false">[</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo>=</mo><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>1</mn><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow></mfrac></mstyle><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>l</mi><mi>n</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow></mfrac></mstyle><mi mathvariant="normal">∣</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\dfrac{1}{sinx}\,dx =\int\csc{x}\,dx \\=\int\dfrac{sinx}{(sinx)^2}\,dx=\int\dfrac{sinx}{1-(cosx)^2}\,dx \\=-\int\dfrac{1}{1-(cosx)^2}\,d(cosx)=-\int\dfrac{1}{(1+cosx)(1-cosx)}\,d(cosx) \\=-\dfrac{1}{2}[\int\dfrac{1}{1+cosx}\,d(cosx+1) - \int\dfrac{1}{1-cosx}\,d(1-cosx)] \\=-\dfrac{1}{2}ln|\dfrac{1+cosx}{1-cosx}| \\=-\dfrac{1}{2}ln\dfrac{(sinx)^2}{(1-cosx)^2} \\=ln|\dfrac{1-cosx}{sinx}| \\=ln|cscx + cotx| + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.27252em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.27252em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.427108em;vertical-align:-0.936em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mo>+</mo><mi>C</mi><mo separator="true">,</mo><mspace width="1em"/><mi>t</mi><mi>a</mi><mi>n</mi><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\int (secx)^2\,dx=tanx + C,\quad tanx&#x27;=(secx)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mo stretchy="false">(</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mo>+</mo><mi>C</mi><mo separator="true">,</mo><mspace width="1em"/><mi>c</mi><mi>o</mi><mi>t</mi><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\int (cscx)^2\,dx=-cotx +C,\quad cotx&#x27;=-(cscx)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mtext>  </mtext><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>C</mi><mo separator="true">,</mo><mspace width="1em"/><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mtext>  </mtext><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int secx \; tanx\, dx= \int \dfrac{sinx}{(cosx)^2}\,dx=\int-\dfrac{1}{(cosx)^2}\,d(cosx)=secx+C, \quad (secx)&#x27;=secx\;tanx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.27252em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mtext>  </mtext><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>C</mi><mo separator="true">,</mo><mspace width="1em"/><mo stretchy="false">(</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mo>−</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int cscx \; cotx \,dx = \int\dfrac{cosx}{(sinx)^2}\,dx=\int\dfrac{1}{(sinx)^2}\,d(sinx)=-cscx + C, \quad (cscx)&#x27; = cscx - cotx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0435600000000003em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span></span></span></span><h5 id="6"><a href="#6" class="headerlink" title="6"></a>6</h5><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>a</mi></mfrac></mstyle><mi>a</mi><mi>r</mi><mi>c</mi><mi>t</mi><mi>a</mi><mi>n</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>a</mi></mfrac></mstyle><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\dfrac{1}{a^2 + x^2}\,dx=\dfrac{1}{a}arctan\dfrac{x}{a} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msqrt><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mi>a</mi><mi>r</mi><mi>c</mi><mi>s</mi><mi>i</mi><mi>n</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>a</mi></mfrac></mstyle><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\dfrac{1}{\sqrt{a^2 - x^2}}\,dx=arcsin\dfrac{x}{a} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><h5 id="7"><a href="#7" class="headerlink" title="7"></a>7</h5><p><strong>三角函数换元</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mtext>令</mtext><mtext>  </mtext><mi>x</mi><mo>=</mo><mi>a</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo separator="true">,</mo><mspace width="1em"/><mi>d</mi><mi>x</mi><mo>=</mo><mi>a</mi><mtext>  </mtext><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext>  </mtext><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mtext>  </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>a</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi></mrow></mfrac></mstyle><mtext>  </mtext><mi>a</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext>  </mtext><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext> </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>+</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi><mspace linebreak="newline"></mspace><mtext>回代</mtext><mtext>  </mtext><mi>x</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>a</mi></mfrac></mstyle><mo separator="true">,</mo><mspace width="1em"/><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt><mi>a</mi></mfrac></mstyle><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt><mi mathvariant="normal">∣</mi><mo>−</mo><mi>l</mi><mi>n</mi><mi>a</mi><mo>+</mo><msub><mi>C</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\dfrac{1}{\sqrt{x^2 - a^2}}\,dx \\令\; x=asect, \quad dx=a\;sect \; tant \; dt \\=\int \dfrac{1}{atant} \; asect \; tant\, dt \\=\int sect\, dt \\=ln|sect + tant| + C \\回代 \; x sect=\dfrac{x}{a} ,\quad tant=\dfrac{\sqrt{x^2 - a^2}}{a} \\=ln | x + \sqrt{x^2 - a^2}| - lna + C_1 \\=ln | x + \sqrt{x^2 - a^2}| + C </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">令</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">代</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.590389em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.163389em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.163389em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mtext>令</mtext><mtext>  </mtext><mi>x</mi><mo>=</mo><mi>a</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mo separator="true">,</mo><mspace width="1em"/><mi>d</mi><mi>x</mi><mo>=</mo><mi>a</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext>  </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>a</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mfrac></mstyle><mtext>  </mtext><mi>a</mi><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo separator="true">,</mo><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext> </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>+</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi><mspace linebreak="newline"></mspace><mtext>回代</mtext><mtext>  </mtext><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt><mi>a</mi></mfrac></mstyle><mtext>  </mtext><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>a</mi></mfrac></mstyle><mspace linebreak="newline"></mspace><mo>=</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\dfrac{1}{\sqrt{x^2 + a^2}}\,dx \\令\; x=atant, \quad dx=a\;(sect)^2 \; dt \\=\int \dfrac{1}{asect} \; a(sect)^2, dt \\=\int sect\, dt \\=ln|sect + tant| + C  \\回代 \; sect = \dfrac{\sqrt{x^2 + a^2}}{a} \; tant=\dfrac{x}{a} \\=ln|x + \sqrt{x^2 + a^2}| + C </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">令</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">代</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.590389em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.163389em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><msqrt><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mtext>令</mtext><mtext>  </mtext><mi>x</mi><mo>=</mo><mi>a</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>t</mi><mspace width="1em"/><mi>d</mi><mi>x</mi><mo>=</mo><mi>a</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>t</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mn>2</mn><mi>t</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>t</mi><mspace linebreak="newline"></mspace><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>t</mi></mrow><mn>4</mn></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>t</mi><mn>2</mn></mfrac></mstyle><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mspace linebreak="newline"></mspace><mtext>回代</mtext><mtext>  </mtext><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>t</mi><mo>=</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>2</mn><mi>x</mi><msqrt><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mrow><msup><mi>a</mi><mn>2</mn></msup></mfrac></mstyle><mspace width="1em"/><mi>t</mi><mo>=</mo><mi>a</mi><mi>r</mi><mi>c</mi><mi>s</mi><mi>i</mi><mi>n</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>a</mi></mfrac></mstyle><mspace linebreak="newline"></mspace><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><msup><mi>a</mi><mn>2</mn></msup><mn>2</mn></mfrac></mstyle><mi>a</mi><mi>r</mi><mi>c</mi><mi>s</mi><mi>i</mi><mi>n</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mi>a</mi></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mn>2</mn></mfrac></mstyle><msqrt><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int\sqrt{a^2 - x^2}\, dx \\令\; x=asint \quad dx=acostdt \\=\int a^2 (cost)^2\, dt \\=a^2 \int \dfrac{cos2t+1}{2}\, dt \\=a^2(\dfrac{sin2t}{4}+\dfrac{t}{2})+ C \\回代 \; sin2t=2sintcost=\dfrac{2x\sqrt{a^2-x^2}}{a^2} \quad t=arcsin\dfrac{x}{a} \\=\dfrac{a^2}{2}arcsin\dfrac{x}{a} + \dfrac{x}{2}\sqrt{a^2 - x^2} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.219509em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">令</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.9780799999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.29208em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">代</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.590389em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><h5 id="8"><a href="#8" class="headerlink" title="8"></a>8</h5><p><strong>平方差</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mstyle><mo stretchy="false">[</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mi>a</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>−</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mi>x</mi><mo>−</mo><mi>a</mi></mrow></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mstyle><mi>l</mi><mi>n</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>x</mi><mo>+</mo><mi>a</mi></mrow><mrow><mi>x</mi><mo>−</mo><mi>a</mi></mrow></mfrac></mstyle><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int \dfrac{1}{x^2-a^2}\, dx \\=\int \dfrac{1}{(x+a)(x-a)}\, dx \\=\dfrac{1}{2a}[\int \dfrac{1}{x+a}\,dx - \int \dfrac{1}{x-a}\, dx]\\=\dfrac{1}{2a}ln\dfrac{x+a}{x-a} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><h5 id="9"><a href="#9" class="headerlink" title="9"></a>9</h5><p><strong>三角函数变换</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mn>2</mn><mi>x</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>x</mi></mrow><mn>4</mn></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mn>2</mn></mfrac></mstyle><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int (cosx)^2\, dx=\int \dfrac{cos2x+1}{2}\,dx=\dfrac{sin2x}{4}+\dfrac{x}{2}+ C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mo stretchy="false">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mn>2</mn><mi>x</mi></mrow><mn>2</mn></mfrac></mstyle><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mn>2</mn></mfrac></mstyle><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>x</mi></mrow><mn>4</mn></mfrac></mstyle><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int (sinx)^2\, dx=\int \dfrac{1-cos2x}{2}\, dx=\dfrac{x}{2} - \dfrac{sin2x}{4} + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord">2</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mo stretchy="false">(</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>1</mn><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mo>−</mo><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int (tanx)^2\, dx=\int (secx)^2 - 1\, dx=tanx - x + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mo stretchy="false">(</mo><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>1</mn><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mo>−</mo><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int (cotx)^2\, dx=\int (cscx)^2 - 1\, dx=-cotx - x + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.120228em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不定积分基本公式与推导&quot;&gt;&lt;a href=&quot;#不定积分基本公式与推导&quot; class=&quot;headerlink&quot; title=&quot;不定积分基本公式与推导&quot;&gt;&lt;/a&gt;不定积分基本公式与推导&lt;/h2&gt;&lt;h5 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;header</summary>
      
    
    
    
    <category term="考研" scheme="https://zzt.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="高数" scheme="https://zzt.github.io/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="https://zzt.github.io/2022/01/26/linear-list/"/>
    <id>https://zzt.github.io/2022/01/26/linear-list/</id>
    <published>2022-01-26T14:35:02.000Z</published>
    <updated>2022-05-04T02:31:07.162Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h4><p>线性表是具有<strong>相同数据类型</strong>的 n (n&gt;=0) 个<strong>数据元素</strong>的<strong>有限</strong>序列。若用 L 命名线性表，则其一般表示为</p><p>$L=(a_1, a_2, … ,a_i ,a_{i+1}, …, a_n)$</p><h4 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h4><ul><li>InitList(&amp;n); 初始化表，构造一个空的线性表</li><li>Length(L); 获得线性表 L 的长度</li><li>LocateElem(L, e); 按值查找，在表 L 中找到数据元素 e</li><li>GetElem(L, i); 按位查找，获取表 L 的第 i 个数据元素</li><li>ListInsert(&amp;L, i, e); 插入，向表 L 的 i 位置插入数据元素 e</li><li>ListDelete(&amp;L, i, &amp;e); 删除，删除表 L 中 i 位置的元素，并将删除的值保存在 e 中</li><li>PrintList(L); 输出，按前后顺序输出表 L 中的数据元素</li><li>DestroyList(&amp;L); 销毁，销毁线性表 L，并释放 L 所占用的内存空间</li></ul><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><p>线性表的<strong>顺序存储</strong>称为<strong>顺序表</strong>。</p><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><ul><li>线性表中元素的序位是从 1 开始的，数组元素的下标是从 0 开始的</li><li>顺序表需要分配连续的内存空间，动态分配时，一旦空间沾满，就另外开辟一块更大的连续空间，用来替换原来的存储空间。比如，原表长 n，现已经存满，需要再扩充 m 个单位，则需要开辟连续的 m + n 空间，然后将原来的 n 个元素复制到新申请的空间中</li></ul><h4 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h4><ol><li>从顺序表中删除具有最小值的元素（假设唯一）并由函数返回被删元素的值。空出的位置由最后一个元素填补，若顺序表为空则显示出错信息并退出运行。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Del_Min</span><span class="params">(sqList &amp;L, ElementType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min = L.data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] &lt; min) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            e = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[index] = L.data[L.length - <span class="number">1</span>];</span><br><span class="line">    L.length --;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设计一个高效算法，将顺序表 L 的所有元素逆置，要求空间复杂度为 O(1)</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(sqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tail = L.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = L.data[head];</span><br><span class="line">        L.data[head] = L.data[tail];</span><br><span class="line">        L.data[tail] = temp;</span><br><span class="line">        head ++;</span><br><span class="line">        tail --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">
&lt;h4 id=&quot;线性表的定义&quot;&gt;&lt;a href=&quot;#线性表的定义&quot; class=&quot;headerlink&quot; title=&quot;线性表的定义&quot;&gt;&lt;/a&gt;线性表的定义&lt;/h4&gt;&lt;p&gt;线性表是具有&lt;strong&gt;相同数据类型&lt;/strong&gt;的 n (n&amp;gt;=0) 个&lt;strong&gt;数</summary>
      
    
    
    
    <category term="考研" scheme="https://zzt.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="数据结构" scheme="https://zzt.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>音频开发基础</title>
    <link href="https://zzt.github.io/2022/01/23/audio-basic/"/>
    <id>https://zzt.github.io/2022/01/23/audio-basic/</id>
    <published>2022-01-22T17:53:41.000Z</published>
    <updated>2022-05-04T02:31:07.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本人目前音视频技术基本零基础（在公司里耳濡目染，听过一些概念，有着肤浅的理解，实际是一头雾水），鉴于本人在短视频公司工作过（不好意思不懂这些），本身其实对这块也比较感兴趣，加上之前一直没下决心系统学习这块知识，现在想开始从零开始系统学习音视频技术，并记录学习笔记「音视频从零开始」系列，希望能帮到更多零基础想学习音视频技术的同学</p><p>注：系列文章都是通过查找各个资料加上我个人理解总结出来的学习笔记，文章最后会附上参考文章或书籍的连接，如果有理解不对或有涉及知识侵权的地方，请及时评论联系我</p></blockquote><p>这是音视频技术从零开始学习笔记的第一篇，从音频技术相关的概念开始，本篇不涉及任何编程相关内容。个人认为，概念理解清楚对以后编程模块的边界、职责划分以及该使用哪些工具有很大的帮助。   </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/18/1735fe36e55ac608~tplv-t2oaga2asx-image.image" alt=""><br><strong>图1-音频技术核心概念</strong></p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>模拟信号（连续信号）是连续的，意味着不会失真（音质好），比如磁带、唱片中就通过物理介质（通过唱片表面的起伏跌宕，或者是磁带上的磁粉引起的磁场强度来表示音箱上振膜的即时位置）保存着音频的模拟信号。</p><p>我们都知道唱片和磁带已经逐渐离开人们的视野，就是因为通过物理手段无法长久的保存音频信号，唱片会磨损，磁带会老化，那用什么方法能够长久的保存音频信息呢？</p><p>目前，使用最多的方法就是通过数字来保存音频，那么又如何将音频转为数字呢？首先先通过图中「采样」手段，将模拟信号转为离散信号，离散信号可以理解为不连续信号，把一段连续函数按照一定规则断开。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/18/1735fe41bf685ece~tplv-t2oaga2asx-image.image" alt=""><br><strong>图2-采样信号</strong> <a href="https://www.newvfx.com/forums/topic/21333">原图链接</a></p><p>此图为CD标准的采样信号图，图中的「采样率44.1Khz」就是断开函数的规则，每 1s 将一段波分为 44100 个矩形，经过采样，得到了一个有一堆柱形图组成的图形（离散信号）</p><p>为什么音频的采样率是 44.1Khz 呢？对于高质量的音频（人耳能够听到的频率范围是 20hz-20Khz），根据采样定理，按比人能听到的最大频率的2倍进行采样可以保证声音在被数字化处理后，还能有质量保障</p><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/18/1735fe4e3326d98f~tplv-t2oaga2asx-image.image" alt=""><br><strong>图3-量化（信号处理）</strong></p><p>经过采样后，我们发现图中的纵坐标是没有值的，无法表示每段样本的数字大小，这时候就需要引入量化的概念。通俗易懂地讲「量化」就是在沿垂直方向再将信号图按照一定数字范围切断，保证每段样本能用数字描述。这个数字的最终物理意义是反应在音响振膜位置，比如用[0-10万]进行量化，最终反应在振膜的位置就是 0-10万。</p><p>那么CD的量化标准是什么呢？采用16bit(short)，也就是2的16次方，总共65536，然后为了由于振膜是可以发生正向和负向位移，所以用[-32767,32768]进行量化。</p><p>所以图中虚线范围就代表了量化的数字范围，最终的红色曲线就是量化的结果，数字信号</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>经过量化后，每一个采样都是一个数字，那这么多的数字该如何存储呢？这就需要第三个概念：「编码」，所谓编码，就是按照一定的格式记录采样和量化后的数据，比如顺序存储或压缩存储等。</p><p>这里涉及很多种格式，通常所说的音频的裸数据格式就是脉冲编码调制数据，简称 PCM （Pulse Code Modulation)。描述一段 PCM 通常需要以下三个概念</p><ul><li>量化格式（SampleFormat）</li><li>采样率（SampleRate)</li><li>声道数（Channel)</li></ul><p>还以CD标准为例，量化格式 16bit，采样率 44100，声道数 2。</p><blockquote><p>这里对声道概念做一个补充，平时所谓的双声道、单声道其实可以理解为需要记录几个信号，比如磁带，双声道就是同一时刻记录两个轨道的信息，一个负责记录左耳机振膜位置，一个负责记录右耳机振膜位置，以此类推，多个声道也是类似</p></blockquote><p>上述信息就描述了CD的音质，对于声音格式来说，还有另一个概念用来描述它的大小，称为数据比特率（bitRate)，即 1s 内的比特数目，用于衡量音频数据单位时间内的容量大小，那么比特率如何计算？</p><p>$BitRate=SampleFormat<em>SampleRate</em>Channel $<br>单位为千比特每秒kbps(kb per second)。<br>比如对于CD音质，<br>$44100<em>16</em>2=1378.125kbps$<br>那么，一分钟里，CD音质数据需要占多大存储空间呢？<br>$1378.125*60/8/1024=10.09MB$</p><p>所以一段1分钟的音频经过采样、量化、编码后可以得到一个大约10MB裸数据，成功地将音频的模拟信号转为数字信号，并存储下来。</p><h3 id="音频压缩编码"><a href="#音频压缩编码" class="headerlink" title="音频压缩编码"></a>音频压缩编码</h3><p>上面说到1分钟的CD音质数据的存储空间大于为 10MB，这对于光盘磁盘存储来说可接受，但对于网络传输肯定是无法接受的。所以就需要「压缩编码」出面解决问题</p><p>所谓音频编码主要指音频压缩技术，压缩通常又被分为有损和无损两种，但事实上，任何音频编码方式相对于最真实的自然声音信号，都是有损的压缩。从前面说到的采样、量化、编码中不难理解，我们把一条光滑的音频信号曲线分割成了许多数据块，然后对数据进行二进制编码，过程中其实就已经损失了一部分数据了，所以再次进行压缩也只能是尽可能的接近经过PCM编码后的音频裸数据。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/18/1735fe5c51636b87~tplv-t2oaga2asx-image.image" alt=""><br><strong>图4-PCM编码</strong> <a href="https://baike.baidu.com/pic/pcm%E7%BC%96%E7%A0%81/10865033/0/faedab64034f78f00a6b440077310a55b2191ce5?fr=lemma&amp;ct=single#aid=0&amp;pic=faedab64034f78f00a6b440077310a55b2191ce5">原图链接</a></p><p>既然压缩是为了减小编码后的数据存储空间，那么就应该去掉音频的“冗余信息”，从以下两个方面去衡量哪些数据是冗余的</p><ul><li>之前提到过，人耳所能察觉的声音信号的频率范围为20Hz-20KHz，除此之外的其它频率人耳无法察觉，都可视为冗余信号</li><li>当一个强音频信号和一个弱音频信号同时存在时，弱信号会被强信号掩蔽，可视为冗余</li></ul><p>其中第二点涉及另两个概念「频谱掩蔽效应」和「时域掩蔽效应」，名字看起来高深莫测，其实不难理解。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/18/1735fe64bd6ab53a~tplv-t2oaga2asx-image.image" alt=""><br><strong>图5-频谱掩蔽效应</strong> <a href="https://blog.csdn.net/leixiaohua1020/article/details/28114081">原图链接</a></p><p>「频谱掩蔽效应」一个音频信号被人耳听到是有一个阈值，阈值越小越容易被人听到，如图所示，虚线是随声音频率增大反应的阈值曲线，在 2-5kHz范围内，阈值很低，是人耳对声音最敏感的频率。现在假设有一个 60dB-0.2kHz 的强音信号出现时，阈值曲线会有所改变（图中实线部分），0.1-0.5kHz 频率的阈值被明显抬高，图中大概40dB-0.17kHz 左右的信号和 30dB-0.48kHz左右的信号都会被掩蔽。所以在0.1kHz-0.5kHz范围内，只能听到 65dp-0.2kHz 的声音，其余信号可视为冗余。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/18/1735fe6c243a3458~tplv-t2oaga2asx-image.image" alt=""><br><strong>图6-时域掩蔽效应</strong> <a href="https://blog.csdn.net/leixiaohua1020/article/details/28114081">原图链接</a></p><p>「时域掩蔽效应」是强信号和弱信号在时间维度发生的掩蔽，分为</p><ul><li>前掩蔽，人在听到强信号之前，一些弱信号会被掩蔽</li><li>同时掩蔽，强信号会掩蔽同时发生的弱信号</li><li>后掩蔽，强信号消失后，需要经过一段时间后，才能重新听到弱信号</li></ul><p>在这过程中被掩蔽的信号被视为冗余</p><h3 id="几种音频压缩编码简介"><a href="#几种音频压缩编码简介" class="headerlink" title="几种音频压缩编码简介"></a>几种音频压缩编码简介</h3><div class="table-container"><table><thead><tr><th>编码</th><th>实现简介</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>WAV</td><td>无损压缩，其中一种实现方式是在 PCM 数据格式前加上 44 字节，分别描述采样率、声道数、数据格式等信息。</td><td>音质非常好，大量软件都支持</td><td>多媒体开发的中间文件、保存音乐和音效</td></tr><tr><td>MP3</td><td>具有不错的压缩比，使用 LAME 编码（MP3 编码格式的一种实现）的中高码率的 MP3 文件</td><td>音质在 128Kbit/s 以上表现还不错，压缩比比较高，大量软硬件都支持</td><td>高比特率下对兼容性有要求的音乐鉴赏</td></tr><tr><td>AAC</td><td>新一代有损压缩技术，通过一些附加的编码技术（PS、SBR 等），衍生出了 LC-AAC、HE-AAC、HE-AAC v2三种主要编码格式</td><td>小于 128Kbit/s 表现优异，多用于视频中的音频编码</td><td>128Kbit/s 一下的音频编码，多用于视频中的音频编码</td></tr><tr><td>Ogg</td><td>一种非常有潜力的编码，各种码率下都有比较优秀的表现，尤其是低码率场景下。可以在低码率的场景下仍然保持不错的音质，但目前软件硬件支持情况较差</td><td>可用比 MP3 更小的码率实现比 MP3 更好的音质，但兼容性不好</td><td>语音聊天的音频消息场景</td></tr></tbody></table></div><blockquote><p>1.压缩比，压缩后大小/原大小，通常小于 1，越小表示压缩的越狠<br>2.“码率”是比特率是俗称<br>3.表格总结于《音视频开发指南》，其中一些细节有兴趣的同学可以再深入查阅，本文不再深入研究</p></blockquote><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol><li>为什么磁带、唱片逐渐消失在人们的视野里，音频播放器可以取而代之？</li><li>声音是经过怎样的处理过程后保存成数字信息的？</li><li>为什么要对音频数据进行压缩编码？</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="https://www.zhihu.com/question/19829823">将模拟音频向数字音频的转换过程是怎样的？</a></p></li><li><p><a href="https://zh.wikipedia.org/zh-hans/%E9%87%8F%E5%8C%96_(%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86">量化 (信号处理)</a>)</p></li><li><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/28114081">雷骁骅-视频压缩编码和音频压缩编码的基本原理</a></p></li><li><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/18893769">雷骁骅-视音频编解码技术零基础学习方法</a></p></li><li><p><a href="https://baike.baidu.com/item/PCM%E7%BC%96%E7%A0%81">百度百科-PCM 编码</a></p></li><li><p><a href="https://baike.baidu.com/item/%E9%9F%B3%E9%A2%91%E5%8E%8B%E7%BC%A9/392863">百度百科-音频编码</a> </p></li><li><p>《音视频开发进阶指南-基于 Android 和 iOS 平台的实践》 - 第1章 音视频基础概念</p></li></ul><h3 id="转文声明"><a href="#转文声明" class="headerlink" title="转文声明"></a>转文声明</h3><p>如有文章转载需求，请注明本文作者以及链接，感谢各位理解支持</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本人目前音视频技术基本零基础（在公司里耳濡目染，听过一些概念，有着肤浅的理解，实际是一头雾水），鉴于本人在短视频公司工作过（不好意思不懂这些），本身其实对这块也比较感兴趣，加上之前一直没下决心系统学习这块知识，现在想开始从零开始系统学习音视频技术，</summary>
      
    
    
    
    <category term="Video" scheme="https://zzt.github.io/categories/Video/"/>
    
    
  </entry>
  
  <entry>
    <title>初识比特币</title>
    <link href="https://zzt.github.io/2022/01/23/bc-bitcoin-concept/"/>
    <id>https://zzt.github.io/2022/01/23/bc-bitcoin-concept/</id>
    <published>2022-01-22T17:01:56.000Z</published>
    <updated>2022-05-04T02:31:07.131Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/01/23/bc-bitcoin-concept/btc_cover.png" class=""><h3 id="什么是比特币？"><a href="#什么是比特币？" class="headerlink" title="什么是比特币？"></a>什么是比特币？</h3><blockquote><p>A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. </p><p>一个纯正的点对点去中心化的加密数字货币，应能够通过在线支付将币从一方直接发送到另一方，而无需通过任何中心金融机构。</p></blockquote><p>比特币是一种加密货币（crypto-currency），实现自一个自称中本聪（Satoshi Nakamoto）的不明身份的人所发表的一篇论文（<a href="https://btcpapers.com/">比特币白皮书</a>）</p><p>与其说比特币是一种加密货币，不如说比特币是一种基于 P2P 网络的支付结算系统，这样更易于大家理解其本质。</p><h3 id="为什么要发明比特币？"><a href="#为什么要发明比特币？" class="headerlink" title="为什么要发明比特币？"></a>为什么要发明比特币？</h3><h4 id="中心化，基于信任模型"><a href="#中心化，基于信任模型" class="headerlink" title="中心化，基于信任模型"></a>中心化，基于信任模型</h4><blockquote><p>酒花 App 平台买了两瓶精酿啤酒<br>一个自称三方供应商的人加我微信，告知我其中一瓶酒没货了，可以加钱换其他的酒<br>虽然这个人微信朋友圈都是精酿啤酒相关的内容，且明确知道我买的哪个酒没货了<br>但是，我内心还是不信任这个人，更信任平台，于是我还是在平台换了一瓶酒</p></blockquote><p>平台就真的值得信任么？<br>假如我下单的时候正好赶上平台服务器宕机，扣款成功了，但没收到货。由于平台系统做的不好，再也找不到那笔订单，不能证明我付过钱，也不能给我发货。<br>这笔交易就没有人能说的清楚了，信任也就不存在了。</p><p><strong>比特币要去解决信任问题</strong></p><blockquote><p>What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party. </p><p>我们真正需要的是一种基于加密算法密码学原理而非基于信任的数字货币支付系统，不需要可信任第三方参与的情况下，允许双方直接进行支付交易</p></blockquote><img src="/2022/01/23/bc-bitcoin-concept/decentralized.png" class=""><h4 id="双花攻击（Double-Spending-Attack"><a href="#双花攻击（Double-Spending-Attack" class="headerlink" title="双花攻击（Double Spending Attack)"></a>双花攻击（Double Spending Attack)</h4><p>「双花」即同一笔钱花了两次或多次。</p><img src="/2022/01/23/bc-bitcoin-concept/double_spending.png" class=""><p>假设央行发行了一款数字货币，货币在软件中其实就是文件，完全可以复制。<br>假如 A 在转给 B 100 元后，又复制了同一笔钱转给了 C，就是所谓的「双花」，双花攻击只通过验证数字货币的签名是不够的，还需要使用额外的手段。</p><p><strong>比特币要去解决双花问题</strong></p><blockquote><p>We propose a solution to the double-spending problem using a peer-to-peer network</p><p>我们将在本文提出一种新方案，使用点对点去中心化网络去解决这个双花问题</p></blockquote><p>在<strong>比特币交易</strong>小节中，会详细解释比特币是如何解决双花问题的。</p><h3 id="比特币中的密码学"><a href="#比特币中的密码学" class="headerlink" title="比特币中的密码学"></a>比特币中的密码学</h3><h4 id="哈希算法（Hash-Algorithm"><a href="#哈希算法（Hash-Algorithm" class="headerlink" title="哈希算法（Hash Algorithm)"></a>哈希算法（Hash Algorithm)</h4><p>哈希算法是用来做什么的呢？我们先来看一个小故事。</p><p><strong>雍正到底是不是篡位登基的？</strong></p><img src="/2022/01/23/bc-bitcoin-concept/tamper.png" class="" title="篡改"><p>一直有一个传说称雍正不是康熙真正传位的皇帝，而是有人偷偷修改了遗诏，篡位登基的。  </p><p><strong>假如康熙知道哈希函数</strong>  </p><img src="/2022/01/23/bc-bitcoin-concept/anti_tamper.png" class="" title="利用哈希防篡改"><p>如果没有哈希函数，在康熙皇帝驾崩后，遗诏是死无对证，只能遗诏写什么，大臣就做什么。</p><p>但有了哈希函数后就变得不一样了，康熙可以在活着的时候就可以提前写好遗诏，并用哈希函数计算出一个哈希串，交予大臣们。<br>大臣们看到哈希串也不能猜出遗诏的内容到底是什么，只能等到遗诏公布的那天，再去计算一次哈希值，看与当初皇帝给的哈希串是否一致，来判断遗诏是否被人篡改了。<br>如果修改了，就不会遵诏行事。</p><p>通过这个小故事，可以简单总结出哈希的两个性质：</p><ol><li>防篡改，输入稍有改动，输出千差万别</li><li>输出结果不可逆，只知道结果不能反推出输入是什么</li></ol><h4 id="比特币使用的哈希算法"><a href="#比特币使用的哈希算法" class="headerlink" title="比特币使用的哈希算法"></a>比特币使用的哈希算法</h4><p>SHA256（Security Hash Algorithm），是一种密码哈希函数（Cryptographic Hash Function）。</p><p>$任意输入 ==&gt; SHA256 ==&gt; 256位哈希$</p><p>在比特币中，利用了SHA256的三个性质</p><ul><li>不可逆（Hiding）</li><li>抗哈希碰撞（Collision .istance）</li><li>哈希值不可预测（Puzzle friendly）</li></ul><h5 id="不可逆（Hiding）"><a href="#不可逆（Hiding）" class="headerlink" title="不可逆（Hiding）"></a>不可逆（Hiding）</h5><p>SHA256的特性：</p><ol><li>输入长度任意</li><li>输出长度固定，256bit</li></ol><p>比如</p><p>$全世界的图书 ==&gt; SHA256 ==&gt; 256 位哈希$</p><p>如果这个过程可逆的话，我们就发现了一种无敌的压缩算法，可以把全世界的图书压成 256 位，再进行存储。</p><h5 id="抗哈希碰撞（Collision-istance）"><a href="#抗哈希碰撞（Collision-istance）" class="headerlink" title="抗哈希碰撞（Collision .istance）"></a>抗哈希碰撞（Collision .istance）</h5><p>根据<a href="https://baike.baidu.com/item/%E6%8A%BD%E5%B1%89%E5%8E%9F%E7%90%86/233776">抽屉原理</a>，输入空间无限，输出空间有限，理论上一定会存在碰撞。</p><p>但是，从长期经验看，没有什么人为的、高效的方式制造碰撞。</p><p>只能通过暴力遍历输入空间的方式来寻找碰撞</p><h5 id="哈希值不可预测（Puzzle-friendly）"><a href="#哈希值不可预测（Puzzle-friendly）" class="headerlink" title="哈希值不可预测（Puzzle friendly）"></a>哈希值不可预测（Puzzle friendly）</h5><p>Puzzle Friendly，直译为谜题友好性，是指事先给定一个哈希串，比如 00000000feacb46d… ，前 8 位都是 0，让你解谜题找到输入是什么。</p><p>由于 SHA256 没有直接办法或通过找到一定规律来猜出输入是什么，只能通过暴力遍历输入空间的方式来找到答案。（其实一点都不友好）</p><p>比如你找到一个输入 a，输出的前 7 位都是 0，感觉再简单调整一下输入就能找到答案了，其实不是的，修改输入后可能得到的答案一个 0 都没有。也就是说你的每一次计算是无记忆性的（Memoryless），只能通过大量地尝试，不断的寻找答案。</p><p>除此之外，找到答案后，其他人验证答案却很简单，只需要把你的答案再用哈希函数计算一次即可。（difficult to solve, but easy to verify）</p><p>比特币<strong>挖矿过程</strong>充分利用了 Puzzle friendly，后面我们会详细说明。</p><h4 id="数字签名（Digital-Signature）"><a href="#数字签名（Digital-Signature）" class="headerlink" title="数字签名（Digital Signature）"></a>数字签名（Digital Signature）</h4><p>了解数字签名之前，需要先对非对称加密有一定认识。</p><h5 id="什么是非对称加密？"><a href="#什么是非对称加密？" class="headerlink" title="什么是非对称加密？"></a>什么是非对称加密？</h5><img src="/2022/01/23/bc-bitcoin-concept/asymmetric_encryption.png" class="" title="非对称加密"><p>Alice 想通过非对称加密的方式发送一条消息给 Bob，他要怎么做呢？</p><ol><li>Bob 需要先生成公钥私钥对（public key, private key）</li><li>Bob 的公钥是对所有人公开的，所以 Alice 可以拿到 Bob’s public key</li><li>Alice 使用 Bob’s public key 对 Message 加密，并将密文通过网络传输给 Bob</li><li>Bob 接收到密文后，使用自己的私钥 Bob’s private key 解密，得到了 Message</li><li>完成通信</li></ol><p>由于 Bob’s private key 是保存在 Bob 手里的，只要私钥不泄露，就是安全的。</p><h5 id="3-3-2、什么是数字签名？"><a href="#3-3-2、什么是数字签名？" class="headerlink" title="3.3.2、什么是数字签名？"></a>3.3.2、什么是数字签名？</h5><p>还是 Alice 想要给 Bob 发送一条消息，并采用非对称加密的方式，Alice 凭什么相信 Bob 的公钥就是 Bob 的呢？有没有可能被其他人调包了呢？这就需要 Alice 用到数字签名的技术，来验证 Bob 的身份是否真实</p><img src="/2022/01/23/bc-bitcoin-concept/digital_signature.png" class="" title="数字签名"><ol><li>Bob 用私钥生成数字签名</li><li>Alice 用 Bob 的公钥验证签名</li><li>如果验证通过，则证明公钥一定是 Bob 的，因为签名只能由 Bob 的私钥生成</li></ol><h3 id="四、比特币是如何交易的？"><a href="#四、比特币是如何交易的？" class="headerlink" title="四、比特币是如何交易的？"></a>四、比特币是如何交易的？</h3><h4 id="4-1、区块链"><a href="#4-1、区块链" class="headerlink" title="4.1、区块链"></a>4.1、区块链</h4><p>在比特币系统中，交易是存在区块里的，那么区块链到底是什么呢？</p><img src="/2022/01/23/bc-bitcoin-concept/what_is_block_chain.png" class=""><ul><li>一个区块是由 block header 和 block body 组成</li><li>block header 中会存储前一个区块头的哈希值</li><li>block body 中会存储具体的交易信息（Transaction 简写为 Tx)</li></ul><p>区块链其实不是区块组成的链表结构，而是通过 (key,value) 数据库实现的。在数据库中，key 是区块头的哈希值，value 是区块内容。</p><h4 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h4><p>在比特币中，账户就是由本机生成的公私钥对</p><ul><li>公钥的哈希值用作转账地址，相当于银行卡号</li><li>私钥相当于银行密码，需要自己妥善保管，一旦丢失是无法找回的</li></ul><h4 id="防止双花"><a href="#防止双花" class="headerlink" title="防止双花"></a>防止双花</h4><p>现实中，A -&gt; B 100元人民币的过程实际是 A 的钱包减少 100元，B 的钱包增加 100元，天然能防止「双花」（除非你把花出去的钱偷回来再花一次）。</p><p>但是，比特币中没有账户系统，不会帮你记录用户的账户中余额还有多少。<br>那么，比特币是如何验证「双花」的呢？</p><h5 id="回溯币源"><a href="#回溯币源" class="headerlink" title="回溯币源"></a>回溯币源</h5><p>比特币的每笔交易由<strong>未花费的输出（UTXO Unspenting Transaction Output），本次交易的输入</strong>拼接而成。每笔交易会去验证 UTXO 是否能支付足量的币，具体可以看下面的例子。</p><img src="/2022/01/23/bc-bitcoin-concept/btc_transaction.png" class=""><ol><li>coinbase 称作「铸币」交易，是矿工挖出新区块获得的出块奖励，假设是 A 获得了出块奖励的 10 BTC</li><li>A 转给了 B 5 BTC，同时转给了 C 5 BTC，这时系统会去验证 A 有没有能力支付 10 BTC，会向前回溯找到 A BTC 的来源，于是找到了铸币交易，发现有 10 BTC，交易合法</li><li>同理 C 在转给 E 7BTC 时，需要找到之前交易中得到的 5 + 2 BTC</li></ol><p>转账者除了要证明币源，还需要将交易用自己的私钥签名，用于身份验证。</p><h3 id="比特币挖矿"><a href="#比特币挖矿" class="headerlink" title="比特币挖矿"></a>比特币挖矿</h3><h4 id="为什么要挖矿？"><a href="#为什么要挖矿？" class="headerlink" title="为什么要挖矿？"></a>为什么要挖矿？</h4><ol><li><strong>产生比特币</strong>，只有挖出新的区块，才会产生新的比特币。中本聪规定，最初出块奖励为 50 BTC，每隔 4 年出块奖励减半，所以比特币总量大概为 2100 万个</li><li><strong>打包交易</strong>，通过挖出新区块，打包记录新产生的交易</li><li><strong>达成共识</strong>，通过工作量证明（Proof of Work）+ 奖励机制，让系统中的节点达成共识，向好的方向发展</li></ol><h4 id="挖矿的过程"><a href="#挖矿的过程" class="headerlink" title="挖矿的过程"></a>挖矿的过程</h4><blockquote><p>比特币挖矿的过程和实际挖金矿的过程很像：</p><ul><li>金子的总量是有限的，越挖会越少，比特币也是如此</li><li>挖金子需要付出科技成本和体力劳动后才能得到回报，比特币也是需要付出算力、电力成本，才能收获比特币</li></ul></blockquote><p>下面我们来简单了解一下，比特币挖矿的过程是怎样的。</p><h5 id="找到最长合法链"><a href="#找到最长合法链" class="headerlink" title="找到最长合法链"></a>找到最长合法链</h5><p>在比特币中的矿工指的是系统中的全节点，除了挖矿，还要负责维护全量的区块数据</p><p>诚实的矿工会按照最长合法链规则挖矿</p><ul><li><strong>最长</strong>，顾名思义，矿工只沿着系统中最长的链向后挖</li><li><strong>合法</strong>，验证区块信息是否被篡改，区块中记录的所有的交易是否合法。一旦矿工识别当前链不合规，便会马上找到另外的最长合法链，继续挖矿</li></ul><h5 id="挖矿解谜"><a href="#挖矿解谜" class="headerlink" title="挖矿解谜"></a>挖矿解谜</h5><p>简单说，挖矿解谜就是矿工通过暴力哈希运算，找到符合要求的随机数 nonce，满足下面的公式</p><p>$H(header || nonce) &lt;= target$</p><ul><li>target 是一串 256 位的哈希（前 k 位都是 0）</li><li>k 越大，target 越小，挖矿难度越高。就像打靶子一样，k 越大，表示靶子越小，越难命中</li><li><p>增加算力，会增加挖到矿的概率，但不代表当前区块一定会被算力高的矿工挖到</p><p>中本聪设计出块时间在10分钟左右，每两周调整一次挖矿难度。比如上两周平均出块时间为 7 分钟，则会增大难度，否则会降低难度。</p></li></ul><h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><p>解谜成功后，需要迅速把组装好的区块向相邻节点广播，让自己挖的区块在最长合法链中得到确认，拿到出块奖励和交易手续费。</p><h5 id="6次交易确认机制"><a href="#6次交易确认机制" class="headerlink" title="6次交易确认机制"></a>6次交易确认机制</h5><img src="/2022/01/23/bc-bitcoin-concept/6_confirms.png" class=""><p>网络是不可靠的，在广播阶段很有可能出现延时。<br>所以交易上链后，并不是马上就生效的，中本聪设计了一个区块上链后需要再等 6 个区块上链后才能被真正确认。</p><p>为什么要这样做？</p><ol><li>防止双花，假如甲、乙矿工同时挖到了新区块，并且广播了出去。其中甲记录 A 转给 B 10BTC，乙记录了 A 转给 C 10BTC，事实上 A 只有 10BTC，如果两个区块都被认可，那就出现了双花。</li><li>为什么是 6 次？中本聪认为，6 个区块大概要花费一个小时才能挖出来，想要再做一次分叉攻击篡改，是需要较大成本的。</li></ol><h4 id="51-算力攻击"><a href="#51-算力攻击" class="headerlink" title="51%算力攻击"></a>51%算力攻击</h4><img src="/2022/01/23/bc-bitcoin-concept/51%25_attack.png" class=""><p>假设有某个组织拥有了全世界 51% 的算力，并且一直在沿着自己的链挖矿，理论上某个时间点，这个组织所挖的链就会变成最长的，广播后，这条链就会成为最长合法链，那么以前的交易就会被这个组织替换。</p><ul><li>51% 攻击只能将合法的交易替换上链，但是无法偷其他用户的比特币，因为诚实的节点会验证交易的签名。</li><li>51% 攻击是可以发动双花攻击的，由于算力强大，会导致 6 次确认机制失效。比如 A =&gt; B (10BTC) 已经得到确认，其中 A 是攻击者，交易是 A 的签名，发动 51% 攻击后，完全可以修改为 A =&gt; C (10BTC)，C 可以是攻击者的另一个账户。</li><li>51% 只是一个象征性的数字，并不一定算力一定要达到 51 才能攻击，有研究小组表明只要拥有 30% 的全网算力，就足以发动 51% 攻击。（为什么只需要30%？个人猜测是，其他算力之间还存在竞争关系，而这30%是团结一致的）</li></ul><p>曾有矿池（GHash.IO）算力超过了 51%，一度引起比特币价值暴跌，之后很多矿工自觉退出了矿池，来保证系统的安全。</p><img src="/2022/01/23/bc-bitcoin-concept/mining_healthy.png" class=""><p>比特币系统在「安全性」「高价值」「健康挖矿」三个方面已经形成闭环。<br>算力越高，想发动 51% 攻击就越困难，系统就越安全，随之比特币价格就会越高。<br>使得想要发动攻击的人即使发动了攻击也不一定能赚到什么，还不如用所有算力稳稳挖矿收益高。</p><h3 id="比特币的缺点"><a href="#比特币的缺点" class="headerlink" title="比特币的缺点"></a>比特币的缺点</h3><ol><li>工作量证明机制造成算力、电力的浪费</li><li>出块时间限定平均10分钟左右，一笔交易需要大概需要1小时才能得被系统确认</li><li>比特币私钥丢失之后，是没办法找回的，账户中的比特币永远都取不出来了</li><li>转账写错地址，无法回滚</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>《零基础学区块链》</li><li><a href="http://zhenxiao.com/blockchain/">北京大学肖臻老师的公开课</a></li><li><a href="https://btcpapers.com/">比特币白皮书</a></li><li>《图说区块链》</li><li>《图解密码技术》</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2022/01/23/bc-bitcoin-concept/btc_cover.png&quot; class=&quot;&quot;&gt;
&lt;h3 id=&quot;什么是比特币？&quot;&gt;&lt;a href=&quot;#什么是比特币？&quot; class=&quot;headerlink&quot; title=&quot;什么是比特币？&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="BlockChain" scheme="https://zzt.github.io/categories/BlockChain/"/>
    
    
  </entry>
  
  <entry>
    <title>Kotlin 协程的创建过程</title>
    <link href="https://zzt.github.io/2022/01/23/kt-coroutine-create/"/>
    <id>https://zzt.github.io/2022/01/23/kt-coroutine-create/</id>
    <published>2022-01-22T16:55:34.000Z</published>
    <updated>2022-05-04T02:31:07.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建并启动协程"><a href="#创建并启动协程" class="headerlink" title="创建并启动协程"></a>创建并启动协程</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> create.<span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//1. 创建协程体</span></span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">suspend</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;in coroutine&quot;</span>)</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    &#125;.createCoroutine(<span class="keyword">object</span>: Continuation&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Int</span>&gt;)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;coroutine end: <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line">            <span class="keyword">get</span>() = EmptyCoroutineContext</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行协程</span></span><br><span class="line">    coroutine.resume(<span class="built_in">Unit</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面代码的输出结果：</strong><br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in coroutine</span><br><span class="line">coroutine end: Success(5)</span><br></pre></td></tr></table></figure></p><h3 id="协程的执行过程"><a href="#协程的执行过程" class="headerlink" title="协程的执行过程"></a>协程的执行过程</h3><img src="/2022/01/23/kt-coroutine-create/call_stack.png" class=""><p>调用栈流程如下</p><img src="/2022/01/23/kt-coroutine-create/call_process.png" class=""><ol><li>我们通过 suspend block#createCoroutine 得到的 coroutine 实际是 SafeContinuation 对象 </li><li>SafeContinuation 实际上是代理类，其中的 delegate 属性才是真正的 Continuation 对象 </li><li>suspend block 中的代码在 BaseContinuationImpl 中执行 </li><li>我们的匿名内部类对象 Continuation 被回调</li></ol><h3 id="suspend-block-是如何变为协程体被执行的？"><a href="#suspend-block-是如何变为协程体被执行的？" class="headerlink" title="suspend block 是如何变为协程体被执行的？"></a>suspend block 是如何变为协程体被执行的？</h3><p>我们分析调用栈得知，resumeWith 最终是在 BaseContinuationImpl 中执行的，下面来看看代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SinceKotlin(<span class="meta-string">&quot;1.3&quot;</span>)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseContinuationImpl</span></span>(</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> completion: Continuation&lt;Any?&gt;?</span><br><span class="line">) : Continuation&lt;Any?&gt;, CoroutineStackFrame, Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">var</span> param = result</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            probeCoroutineResumed(current)</span><br><span class="line">            with(current) &#123;</span><br><span class="line">                <span class="keyword">val</span> completion = completion!!</span><br><span class="line">                <span class="keyword">val</span> outcome: Result&lt;Any?&gt; =</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">val</span> outcome = invokeSuspend(param) <span class="comment">//1.这里执行了 suspend block</span></span><br><span class="line">                        <span class="keyword">if</span> (outcome === COROUTINE_SUSPENDED) <span class="keyword">return</span></span><br><span class="line">                        Result.success(outcome)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (exception: Throwable) &#123;</span><br><span class="line">                        Result.failure(exception)</span><br><span class="line">                    &#125;</span><br><span class="line">                releaseIntercepted()</span><br><span class="line">                <span class="keyword">if</span> (completion <span class="keyword">is</span> BaseContinuationImpl) &#123;</span><br><span class="line">                    current = completion</span><br><span class="line">                    param = outcome</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    completion.resumeWith(outcome) <span class="comment">//2.这里回调了我们的匿名内部类</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">invokeSuspend</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span>: Any? <span class="comment">//3. 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在代码注释 1. 处，调用 current.invokeSuspend，执行了我们定义的协程体，证明 suspend block 其实是 BaseContinuationImpl 的子类 </li><li>在 2. 处，协程体执行完毕后，我们的代码收到了完成回调 </li><li>在 3. 处，可以发现 invokeSuspend 是个抽象方法，suspend block 就是这个方法的具体实现</li></ul><p>下面我通过断点，进一步分析 suspend block 是通过哪个子类执行的。</p><img src="/2022/01/23/kt-coroutine-create/break_point.png" class=""><p>可以看到 current 是名为 {文件}${方法}${变量}$1 格式的对象，证明 kotlin 编译器遇到 suspend 关键字后会帮我们生成一个 BaseContinuationImpl 的子类</p><p>那么，这个子类到底是什么呢？将 kt 编译为 .class 再通过 jadx 打开后，得到的 java 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateCoroutineKt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> create.main() &#123;</span><br><span class="line">        Continuation coroutine = ContinuationKt.createCoroutine(<span class="keyword">new</span> CreateCoroutineKt$create.main$coroutine$<span class="number">1</span>(<span class="keyword">null</span>), <span class="keyword">new</span> CreateCoroutineKt$create.main$coroutine$<span class="number">2</span>());</span><br><span class="line">        Unit unit = Unit.INSTANCE;</span><br><span class="line">        Result.Companion companion = Result.Companion;</span><br><span class="line">        coroutine.resumeWith(Result.constructor-impl(unit));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateCoroutineKt</span>$<span class="title">create</span>.<span class="title">main</span>$<span class="title">coroutine</span>$1 <span class="keyword">extends</span> <span class="title">SuspendLambda</span> <span class="keyword">implements</span> <span class="title">Function1</span>&lt;<span class="title">Continuation</span>&lt;? <span class="title">super</span> <span class="title">Integer</span>&gt;, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> label;</span><br><span class="line"></span><br><span class="line">    CreateCoroutineKt$create.main$coroutine$<span class="number">1</span>(Continuation&lt;? <span class="keyword">super</span> CreateCoroutineKt$create.main$coroutine$<span class="number">1</span>&gt; continuation) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span>, continuation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Continuation&lt;Unit&gt; <span class="title">create</span><span class="params">(<span class="meta">@NotNull</span> Continuation&lt;?&gt; continuation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CreateCoroutineKt$create.main$coroutine$<span class="number">1</span>(continuation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">invoke</span><span class="params">(<span class="meta">@Nullable</span> Continuation&lt;? <span class="keyword">super</span> Integer&gt; continuation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create(continuation).invokeSuspend(Unit.INSTANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">invokeSuspend</span><span class="params">(<span class="meta">@NotNull</span> Object obj)</span> </span>&#123;</span><br><span class="line">        IntrinsicsKt.getCOROUTINE_SUSPENDED();</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.label) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                ResultKt.throwOnFailure(obj);</span><br><span class="line">                System.out.println((Object) <span class="string">&quot;in coroutine&quot;</span>); <span class="comment">//协程体的逻辑</span></span><br><span class="line">                <span class="keyword">return</span> Boxing.boxInt(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;call to &#x27;resume&#x27; before &#x27;invoke&#x27; with coroutine&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显看出，kt 编译器帮助我们把 suspend 关键字变为了 SuspendLambda 的 子类，并重写了 invokeSuspend 方法，不难猜出 SuspendLambda 继承自 BaseContinuationImp</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用一个类图简单的总结一个协程创建并执行的过程。</p><img src="/2022/01/23/kt-coroutine-create/uml.png" class=""><ol><li>suspend block(lambda) 在编译时会转变为 SuspendLambda 的匿名子类，并把 block 中的逻辑通过重写 invokeSuspend 实现</li><li>调用 suspend_lambda.createCoroutine 会得到 SafeContinuation 对象，这只是一个代理类，代理的对象正是我们传入的 SuspendLambda</li><li>createCoroutine 的参数是 completion，代表协程执行完毕的回调</li><li>最终调用到了 BaseContinuationImpl 的 resumeWith，完成协程的调用，调用完毕的回调</li></ol>]]></content>
    
    
      
      
    <summary type="html">
&lt;h3 id=&quot;创建并启动协程&quot;&gt;&lt;a href=&quot;#创建并启动协程&quot; class=&quot;headerlink&quot; title=&quot;创建并启动协程&quot;&gt;&lt;/a&gt;创建并启动协程&lt;/h3&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://zzt.github.io/categories/Kotlin/"/>
    
    
    <category term="Kotlin协程" scheme="https://zzt.github.io/tags/Kotlin%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Sequence 原理</title>
    <link href="https://zzt.github.io/2022/01/22/kt-sequence/"/>
    <id>https://zzt.github.io/2022/01/22/kt-sequence/</id>
    <published>2022-01-22T14:01:56.000Z</published>
    <updated>2022-05-04T02:31:07.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Sequence-和-List-的区别"><a href="#一、Sequence-和-List-的区别" class="headerlink" title="一、Sequence 和 List 的区别"></a>一、Sequence 和 List 的区别</h2><p>以下内容出自<a href="https://kotlinlang.org/docs/sequences.html#sequence">官方示例</a></p><h3 id="1-List"><a href="#1-List" class="headerlink" title="1. List"></a>1. List</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">list</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> words = <span class="string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> wordList = words.toList()</span><br><span class="line">    <span class="keyword">val</span> lengthList = wordList.filter&#123; println(<span class="string">&quot;filter <span class="variable">$it</span>&quot;</span>); it.length &gt; <span class="number">3</span>&#125;</span><br><span class="line">        .map &#123; println(<span class="string">&quot;map <span class="subst">$&#123;it.length&#125;</span>&quot;</span>); it.length &#125;</span><br><span class="line">        .take(<span class="number">4</span>)</span><br><span class="line">    println(<span class="string">&quot;Lengths of first 4 words longer than 3 chars&quot;</span>)</span><br><span class="line">    println(lengthList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">filter The</span><br><span class="line">filter quick</span><br><span class="line">filter brown</span><br><span class="line">filter fox</span><br><span class="line">filter jumps</span><br><span class="line">filter over</span><br><span class="line">filter the</span><br><span class="line">filter lazy</span><br><span class="line">filter dog</span><br><span class="line">map 5</span><br><span class="line">map 5</span><br><span class="line">map 5</span><br><span class="line">map 4</span><br><span class="line">map 4</span><br><span class="line">Lengths of first 4 words longer than 3 chars</span><br><span class="line">[5, 5, 5, 4]</span><br></pre></td></tr></table></figure><br>运行过程<br><img src="/2022/01/22/kt-sequence/list_words.png" class=""></p><h3 id="2-Sequence"><a href="#2-Sequence" class="headerlink" title="2. Sequence"></a>2. Sequence</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sequence</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> words = <span class="string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> wordSeq = words.asSequence()</span><br><span class="line">    <span class="keyword">val</span> lengthSeq = wordSeq</span><br><span class="line">        .filter &#123;</span><br><span class="line">            println(<span class="string">&quot;filter <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">            it.length &gt; <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">        .map &#123;</span><br><span class="line">            println(<span class="string">&quot;map <span class="subst">$&#123;it.length&#125;</span>&quot;</span>)</span><br><span class="line">            it.length</span><br><span class="line">        &#125;</span><br><span class="line">        .take(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Lengths of first 4 words longer than 3 chars&quot;</span>)</span><br><span class="line">    println(lengthSeq.toList())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Lengths of first 4 words longer than 3 chars</span><br><span class="line">filter The</span><br><span class="line">filter quick</span><br><span class="line">map 5</span><br><span class="line">filter brown</span><br><span class="line">map 5</span><br><span class="line">filter fox</span><br><span class="line">filter jumps</span><br><span class="line">map 5</span><br><span class="line">filter over</span><br><span class="line">map 4</span><br><span class="line">[5, 5, 5, 4]</span><br></pre></td></tr></table></figure><br>运行过程<br><img src="/2022/01/22/kt-sequence/sequence_words.png" class=""></p><h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><ol><li>直观来看，sequence 执行的步骤少于 list</li><li>list 的操作符会立即执行，sequence 的操作符可以理解为<strong>先声明</strong>，后面执行 toList 的时候才会触发</li><li>list filter 操作符处理了全量数据，然后 map 映射 filter 之后的所有数据，sequence 则是每条数据经过 filter -&gt; map 流水线处理，不合格的数据不会向后执行</li></ol><h2 id="二、Sequence-原理"><a href="#二、Sequence-原理" class="headerlink" title="二、Sequence 原理"></a>二、Sequence 原理</h2><p>下面我们具体看看</p><ol><li>为什么 sequence 能做到先声明，后触发</li><li>为什么 sequence 能实现流水线的效果，避免操作浪费</li></ol><p>下面的图描述了，声明操作符到触发流程的过程，我们逐一剖析每一步都做了什么<br><img src="/2022/01/22/kt-sequence/sequence.png" class=""></p><p>我们按照代码真正执行的顺序来分析，有助于理解，执行顺序正和我们声明操作的顺序相反</p><h3 id="take-amp-toList"><a href="#take-amp-toList" class="headerlink" title="take &amp; toList"></a>take &amp; toList</h3><p>最后的操作符是 take(4)，然后将其转为了 List。<br>首先来看看 take<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//take(4) 操作符其实对应的会生成一个 TakeSequence 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Sequence<span class="type">&lt;T&gt;</span>.<span class="title">take</span><span class="params">(n: <span class="type">Int</span>)</span></span>: Sequence&lt;T&gt; &#123;</span><br><span class="line">    require(n &gt;= <span class="number">0</span>) &#123; <span class="string">&quot;Requested element count <span class="variable">$n</span> is less than zero.&quot;</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">        n == <span class="number">0</span> -&gt; emptySequence()</span><br><span class="line">        <span class="keyword">this</span> <span class="keyword">is</span> DropTakeSequence -&gt; <span class="keyword">this</span>.take(n)</span><br><span class="line">        <span class="keyword">else</span> -&gt; TakeSequence(<span class="keyword">this</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">TakeSequence</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sequence: Sequence&lt;T&gt;, <span class="comment">//传入了上一个Sequence，也就是 map 对应的 Sequence</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">) : Sequence&lt;T&gt;, DropTakeSequence&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        require(count &gt;= <span class="number">0</span>) &#123; <span class="string">&quot;count must be non-negative, but was <span class="variable">$count</span>.&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">drop</span><span class="params">(n: <span class="type">Int</span>)</span></span>: Sequence&lt;T&gt; = <span class="keyword">if</span> (n &gt;= count) emptySequence() <span class="keyword">else</span> SubSequence(sequence, n, count)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">take</span><span class="params">(n: <span class="type">Int</span>)</span></span>: Sequence&lt;T&gt; = <span class="keyword">if</span> (n &gt;= count) <span class="keyword">this</span> <span class="keyword">else</span> TakeSequence(sequence, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; = <span class="keyword">object</span> : Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> left = count</span><br><span class="line">        <span class="keyword">val</span> iterator = sequence.iterator() <span class="comment">//map 对应的 Sequence 的 iterator</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            left--</span><br><span class="line">            <span class="keyword">return</span> iterator.next()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123; <span class="comment">//通过 left，决定取 list 中的前几个数据</span></span><br><span class="line">            <span class="keyword">return</span> left &gt; <span class="number">0</span> &amp;&amp; iterator.hasNext() <span class="comment">//看上一个 iterator 中是否有数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>代码中的注释已经详细解释了逻辑，其中重点是：</p><ol><li>操作符会对应一个 Sequence 对象去处理迭代逻辑</li><li>TakeSequence 在构造的时候，传入了上一个 Sequence 对象</li><li>TakeSequence 的 hasNext 返回什么取决于上一个 iterator 的 hasNext</li></ol><p>下面来看看 toList 做了什么<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Sequence<span class="type">&lt;T&gt;</span>.<span class="title">toList</span><span class="params">()</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.toMutableList().optimizeReadOnlyList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, C : MutableCollection&lt;in T&gt;</span>&gt; Sequence<span class="type">&lt;T&gt;</span>.<span class="title">toCollection</span><span class="params">(destination: <span class="type">C</span>)</span></span>: C &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        destination.add(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>optimizeReadOnlyList 只是做了一次类型转换，将 mutable 转为 immutable。<br>toMutableList 最终会调用到 toCollection，这里面就正式开始了 iterator 的逻辑，也就是走到了 TakeSequence 里面的迭代逻辑。</p><p>从 TakeSequence 迭代逻辑里知道，它会继续调用上一个 Sequence 的迭代器逻辑，<br>所以，我们大致能猜出，Sequence 是通过类似责任链的方式，完成了流水线操作，我们继续分析。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> Sequence<span class="type">&lt;T&gt;</span>.<span class="title">map</span><span class="params">(transform: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: Sequence&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> TransformingSequence(<span class="keyword">this</span>, transform)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformingSequence</span>&lt;<span class="type">T, R</span>&gt;</span></span><br><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sequence: Sequence&lt;T&gt;, <span class="comment">//传入了上一个 Sequence，filter 对应的 Sequence</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> transformer: (T) -&gt; R) : Sequence&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;R&gt; = <span class="keyword">object</span> : Iterator&lt;R&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> iterator = sequence.iterator()</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: R &#123;</span><br><span class="line">            <span class="keyword">return</span> transformer(iterator.next())<span class="comment">//这里调用我们的 map 逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> iterator.hasNext() <span class="comment">//调用了上一个 iterator 的 hasNext</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;E&gt;</span> <span class="title">flatten</span><span class="params">(iterator: (<span class="type">R</span>) -&gt; <span class="type">Iterator</span>&lt;<span class="type">E</span>&gt;)</span></span>: Sequence&lt;E&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> FlatteningSequence&lt;T, R, E&gt;(sequence, transformer, iterator)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>果不其然，map 对应的 Sequence 是 TransformingSequence，并且迭代过程仍然会先调用上一个 Sequence 的 iterator，这基本印证了我们的猜想，继续分析。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Sequence<span class="type">&lt;T&gt;</span>.<span class="title">filter</span><span class="params">(predicate: (<span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: Sequence&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> FilteringSequence(<span class="keyword">this</span>, <span class="literal">true</span>, predicate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">FilteringSequence</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sequence: Sequence&lt;T&gt;,<span class="comment">//传入上一个 Sequence，asSequence</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sendWhen: <span class="built_in">Boolean</span> = <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> predicate: (T) -&gt; <span class="built_in">Boolean</span></span><br><span class="line">) : Sequence&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; = <span class="keyword">object</span> : Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> iterator = sequence.iterator() <span class="comment">//上一个 Sequence 的 iterator</span></span><br><span class="line">        <span class="keyword">var</span> nextState: <span class="built_in">Int</span> = -<span class="number">1</span> </span><br><span class="line">        <span class="keyword">var</span> nextItem: T? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">calcNext</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;<span class="comment">//上一个 iterator 是否有数据</span></span><br><span class="line">                <span class="keyword">val</span> item = iterator.next()</span><br><span class="line">                <span class="keyword">if</span> (predicate(item) == sendWhen) &#123;<span class="comment">//这里调用了我们的过滤逻辑</span></span><br><span class="line">                    nextItem = item</span><br><span class="line">                    nextState = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nextState = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextState == -<span class="number">1</span>)</span><br><span class="line">                calcNext()</span><br><span class="line">            <span class="keyword">if</span> (nextState == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            <span class="keyword">val</span> result = nextItem</span><br><span class="line">            nextItem = <span class="literal">null</span></span><br><span class="line">            nextState = -<span class="number">1</span></span><br><span class="line">            <span class="meta">@Suppress(<span class="meta-string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line">            <span class="keyword">return</span> result <span class="keyword">as</span> T</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextState == -<span class="number">1</span>)</span><br><span class="line">                calcNext()</span><br><span class="line">            <span class="keyword">return</span> nextState == <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了过滤逻辑和 map 不一致，其他是一样的。</p><h3 id="asSequence"><a href="#asSequence" class="headerlink" title="asSequence"></a>asSequence</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">asSequence</span><span class="params">()</span></span>: Sequence&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Sequence &#123; <span class="keyword">this</span>.iterator() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">Sequence</span><span class="params">(<span class="keyword">crossinline</span> iterator: () -&gt; <span class="type">Iterator</span>&lt;<span class="type">T</span>&gt;)</span></span>: Sequence&lt;T&gt; = <span class="keyword">object</span> : Sequence&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; = iterator()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码比较简单，就是 new 了一个 Sequence 的匿名对象，并且将 list 的 iterator 作为参数传了进去。<br>所以，流水线最后调用的是 list 的 iterator。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><img src="/2022/01/22/kt-sequence/sequence.png" class=""><p>再看开始的流程图，回答提出的两个问题</p><h3 id="1-为什么-sequence-能做到先声明，后触发"><a href="#1-为什么-sequence-能做到先声明，后触发" class="headerlink" title="1.为什么 sequence 能做到先声明，后触发"></a>1.为什么 sequence 能做到先声明，后触发</h3><p>因为操作符并不会触发迭代逻辑，只有最后的 toList 才会真正触发</p><h3 id="2-为什么-sequence-能实现流水线的效果，避免操作浪费"><a href="#2-为什么-sequence-能实现流水线的效果，避免操作浪费" class="headerlink" title="2.为什么 sequence 能实现流水线的效果，避免操作浪费"></a>2.为什么 sequence 能实现流水线的效果，避免操作浪费</h3><p>因为我们在声明操作符的时候，将 Sequence 对象组装了成了一个链，迭代的时候会从最后一个声明的 iterator 递归地调到第一个声明的 iterator，保证执行顺序是我们声明的顺序。<br>并且，如果迭代的某一环不满足条件，就不会继续走到下一个迭代里，也就避免了操作的浪费。</p><hr><p><strong>如需转载，请注明原文出处，谢谢！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Sequence-和-List-的区别&quot;&gt;&lt;a href=&quot;#一、Sequence-和-List-的区别&quot; class=&quot;headerlink&quot; title=&quot;一、Sequence 和 List 的区别&quot;&gt;&lt;/a&gt;一、Sequence 和 List 的区别&lt;/</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://zzt.github.io/categories/Kotlin/"/>
    
    
    <category term="Kotlin基础" scheme="https://zzt.github.io/tags/Kotlin%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Lambda 函数中的 Receiver 是什么？</title>
    <link href="https://zzt.github.io/2022/01/22/kt-receiver/"/>
    <id>https://zzt.github.io/2022/01/22/kt-receiver/</id>
    <published>2022-01-22T13:31:48.000Z</published>
    <updated>2022-05-04T02:31:07.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、示例代码"><a href="#一、示例代码" class="headerlink" title="一、示例代码"></a>一、示例代码</h3><p>先来看一段示例代码，初步了解 Receiver 是什么</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.StringBuilder</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;&quot;</span>.buildString &#123;</span><br><span class="line">        <span class="keyword">this</span>.append(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        append(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">        append(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">buildString</span><span class="params">(action: <span class="type">StringBuilder</span>.() -&gt; <span class="type">Unit</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    sb.action()</span><br><span class="line">    <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码可以为 String 增加一个扩展函数 buildString，可以直接在 buildString {} 作用域中使用 StringBuilder 的 append 或其他方法，省去了我们自己 new StringBuilder 的过程</p><p>下面是对代码的详细解释<br><img src="/2022/01/22/kt-receiver/define_receiver.png" class=""></p><ul><li>形如 T.() -&gt; R 的函数，就是 Receiver 类型</li><li>需要通过调用 [T的对象].() 的方式，来把 [T的对象] 作为 this 传到 lambda 作用域中</li></ul><img src="/2022/01/22/kt-receiver/call_receiver.png" class=""><ul><li>调用扩展函数时，可以显式用 this 访问传进来的对象</li><li>也可隐式调用</li></ul><h3 id="二、上述代码翻译成-java-是什么样的？"><a href="#二、上述代码翻译成-java-是什么样的？" class="headerlink" title="二、上述代码翻译成 java 是什么样的？"></a>二、上述代码翻译成 java 是什么样的？</h3><p>通过 jadx 工具将 class 转为 java后，代码如下</p><img src="/2022/01/22/kt-receiver/jadx_1.png" class=""><ul><li>main 方法中原本的 lambda 被转为了 <code>buildString(&quot;&quot;, ReceiverKt$main$1.INSTANCE)</code>，ReceiverKt$main$1 是什么我们稍后分析</li><li>buildString 方法接收了一个 Function1 类型的对象，证明 ReceiverKt$main$1 是 kt 帮我们生成的并且实现了 Function1</li><li>buildString 内部逻辑就是创建了一个 StringBuilder，然后调用 function1.invoke(sb)</li></ul><p>下面来看看 ReceiverKt$main$1 是什么<br><img src="/2022/01/22/kt-receiver/jadx_2.png" class=""></p><p>很简单，就是通过 invoke 调用我们 buildString lambda 里的内容</p><h3 id="三、另一个代码示例"><a href="#三、另一个代码示例" class="headerlink" title="三、另一个代码示例"></a>三、另一个代码示例</h3><p>下面我们来看一段和上面例子很像的代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;&quot;</span>.buildString_ &#123;sb: StringBuilder -&gt;</span><br><span class="line">        sb.append(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">        sb.append(<span class="string">&quot;e&quot;</span>)</span><br><span class="line">        sb.append(<span class="string">&quot;f&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">buildString_</span><span class="params">(action: (<span class="type">stringbuilder</span>: <span class="type">StringBuilder</span>) -&gt; <span class="type">Unit</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    action(sb)</span><br><span class="line">    <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>和第一段代码的区别是</p><ul><li>buildString 参数变为了 (StringBuilder) -&gt; Unit，我们将 StringBuilder 对象作为 lambda 的参数传入了</li><li>调用的地方需要使用 it 或者自己定义一个参数名来使用 StringBuilder 对象</li></ul><p>这段代码转为 Java 后是什么样的呢？</p><img src="/2022/01/22/kt-receiver/jadx_3.png" class=""><img src="/2022/01/22/kt-receiver/jadx_4.png" class=""><img src="/2022/01/22/kt-receiver/jadx_5.png" class=""><p>可以看到使用 Receiver 的方式和使用给 lambda 函数定义参数的方式转为 Java 代码后只是在 invoke 参数的变量名有区别，仅此而已。</p><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><ol><li>定义 lambda Receiver，调用方可以在 lambda 作用域中使用 this 访问 Receiver 对象</li><li>定义 lambda 带参函数，调用方可以在 lambda 作用域中自己定义对象变量名或者使用默认的 it</li><li>上述两种方式转为 Java 并没有什么本质区别，只是变量名上的不同</li></ol><h3 id="五、kotlin-标准库里的操作符哪些用到了-Receiver？"><a href="#五、kotlin-标准库里的操作符哪些用到了-Receiver？" class="headerlink" title="五、kotlin 标准库里的操作符哪些用到了 Receiver？"></a>五、kotlin 标准库里的操作符哪些用到了 Receiver？</h3><p>在了解 Receiver 的原理后，可以让我们更好地理解 kotlin 标准库里的操作符</p><h4 id="1-apply"><a href="#1-apply" class="headerlink" title="1.apply"></a>1.apply</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(block: <span class="type">T</span>.() -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    block()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 apply 后，我们可以在 lambda 使用 this，比如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;abc&quot;</span></span><br><span class="line">str.apply &#123; </span><br><span class="line">    println(<span class="keyword">this</span>.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-with"><a href="#2-with" class="headerlink" title="2.with"></a>2.with</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> <span class="title">with</span><span class="params">(receiver: <span class="type">T</span>, block: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> receiver.block()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with 和 apply 的区别是，需要把 receiver 显示地传给 with，比如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;abc&quot;</span></span><br><span class="line">with(str) &#123;</span><br><span class="line">    println(<span class="keyword">this</span>.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>如需转载，请注明原文出处，谢谢！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、示例代码&quot;&gt;&lt;a href=&quot;#一、示例代码&quot; class=&quot;headerlink&quot; title=&quot;一、示例代码&quot;&gt;&lt;/a&gt;一、示例代码&lt;/h3&gt;&lt;p&gt;先来看一段示例代码，初步了解 Receiver 是什么&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://zzt.github.io/categories/Kotlin/"/>
    
    
    <category term="Kotlin基础" scheme="https://zzt.github.io/tags/Kotlin%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
